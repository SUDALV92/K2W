<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprComputer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mainDisplayWidth = 23;
mainText = "";
mainTextLength = string_length(mainText);
mainTextStartPos = 1;
mainTextScrollDelay = 50;

mainText2 = "";
mainText2Length = string_length(mainText2);
mainText2StartPos = 1;
mainText2ScrollDelay = 50;

mainText3 = "";
mainText3Length = string_length(mainText3);
mainText3StartPos = 1;
mainText3ScrollDelay = 50;

mainTextScrollSpd = 8;
alarm[0] = mainTextScrollSpd;

binData = "";
repeat(50)
{
 binData += string(choose(0,1));
}
binI=0;
shutdown = false;
t = 0;

energy = 0;
event_user(0);

upDelay = 0; //actually down delay
downDelay = 0; //actually up delay Kappa
upDelayDecreaser = 0;
downDelayDecreaser = 0;

totalEnergy = 0;
for(var temp = 0; temp &lt; 100; temp++)
{
  if(global.energy[temp])
   totalEnergy++;
}
if(totalEnergy &gt;= 95)
{
 global.stageUnlocked[77] = true;
}

currentString1 = "";
currentString2 = "";
currentString3 = "";
if(global.extraClear == 1)
{
 global.stageRoom[76] = rHomeGood;
}
else
{
 global.stageRoom[76] = rHomeBad;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mainTextScrollDelay &gt; 0)
{
    mainTextScrollDelay--;
}
else
{
    mainTextStartPos += 1;
    if(mainTextStartPos &gt; mainTextLength)
     mainTextStartPos = 1;
}

if(mainText2ScrollDelay &gt; 0)
{
 mainText2ScrollDelay--;
}
else
{
 mainText2StartPos += 1;
 if(mainText2StartPos &gt; mainText2Length)
  mainText2StartPos = 1;
}
 
if(mainText3ScrollDelay &gt; 0)
{
 mainText3ScrollDelay--;
}
else
{
 mainText3StartPos += 1;
 if(mainText3StartPos &gt; mainText3Length)
  mainText3StartPos = 1;
}
 
alarm[0] = mainTextScrollSpd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw event
if(mainTextLength &gt; mainDisplayWidth)
{
    if(string_copy(mainText,mainTextLength-4,5) != "     ")
    {
     mainNewText = mainText + "     ";
     mainTextLength = string_length(mainNewText);
    }
    currentString1 = string_copy(mainNewText,mainTextStartPos,mainDisplayWidth);    
    
    currentLength = string_length(currentString1);
    if(currentLength &lt; mainDisplayWidth)
    {  
     copied = string_copy(mainNewText,1,mainDisplayWidth - currentLength); 
     currentString1 = scrStringAdd(currentString1,copied);
    }
}
else
{
    currentString1 = mainText;
}

//main text 2
if(mainText2Length &gt; mainDisplayWidth)
{
    if(string_copy(mainText2,mainText2Length-4,5) != "     ")
    {
     mainNewText2 = mainText2 + "     ";
     mainText2Length = string_length(mainNewText2);
    }
    currentString2 = string_copy(mainNewText2,mainText2StartPos,mainDisplayWidth);
    
    currentLength = string_length(currentString2);
    if(currentLength &lt; mainDisplayWidth)
    {  
     copied = string_copy(mainNewText2,1,mainDisplayWidth - currentLength); 
     currentString2 = scrStringAdd(currentString2,copied);
    }
}
else
{
    currentString2 = mainText2;
}

//main text 3
if(mainText3Length &gt; mainDisplayWidth)
{
    if(string_copy(mainText3,mainText3Length-4,5) != "     ")
    {
     mainNewText3 = mainText3 + "     ";
     mainText3Length = string_length(mainNewText3);
    }
    currentString3 = string_copy(mainNewText3,mainText3StartPos,mainDisplayWidth);
    
    currentLength = string_length(currentString3);
    if(currentLength &lt; mainDisplayWidth)
    {  
     copied = string_copy(mainNewText3,1,mainDisplayWidth - currentLength); 
     currentString3 = scrStringAdd(currentString3,copied);
    }
}
else
{
    currentString3 = mainText3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(place_meeting(x,y,objPlayer) || shutdown)
{
 global.noShoot = true;
 temp = "Select destination point";
 if(mainText != temp)
 {
  mainText = temp;
  mainTextLength = string_length(mainText);
  mainTextScrollDelay = 10;
  mainTextStartPos = 1;
 }
 
 if(scrButtonCheck(global.downButton) &amp;&amp; !shutdown)
 {
  if(upDelay == 0)
  {
   upDelay = 10 - upDelayDecreaser;   
   upDelayDecreaser += 0.2;
   downDelay = 0;
   downDelayDecreaser = 0;
   
   if(global.selectedStage &gt; 0)
    global.selectedStage--;    
  }
  if(upDelay &gt; 0)
   upDelay--;
  else
   upDelay = 0;
 }
 else
 {
  upDelay = 0;
  upDelayDecreaser = 0;
 }
 if(scrButtonCheck(global.upButton) &amp;&amp; !shutdown)
 {
  if(downDelay == 0)
  {
   downDelay = 10 - downDelayDecreaser;
   downDelayDecreaser += 0.2;
   upDelay = 0;
   upDelayDecreaser = 0;
   if(global.stageUnlocked[85])
   {
    maxStage = 85;
   }
   else if(global.stageUnlocked[84])
   {
    maxStage = 84;
   }
   else if(global.stageUnlocked[77])
   {
    maxStage = 83;
   }
   else
   {
    var maxStage = 0;
    for(var i = 0; i &lt; global.stagesTotal; i++)
    {
     if(!global.stageUnlocked[i])
     {
      maxStage = i;
      break;
     }
    }
   }
   
   if(global.selectedStage &lt; maxStage)
    global.selectedStage++;
  }
  if(downDelay &gt; 0)
   downDelay--;
  else
   downDelay = 0;
 }
 else
 {
  downDelay = 0;
  downDelayDecreaser = 0;
 }
 
 
 if(global.stageUnlocked[global.selectedStage])
 {
  stageName = global.stageName[global.selectedStage];
  temp = "UNLOCKED";  
  if(global.selectedStage == 78 &amp;&amp; global.extraBossCleared[0] == 1 ||
     global.selectedStage == 79 &amp;&amp; global.extraBossCleared[1] == 1 ||
     global.selectedStage == 80 &amp;&amp; global.extraBossCleared[2] == 1 ||
     global.selectedStage == 81 &amp;&amp; global.extraBossCleared[3] == 1 ||
     global.selectedStage == 82 &amp;&amp; totalEnergy == 100 ||
     global.selectedStage == 84 &amp;&amp; global.extraClear == 1 )
  {
   temp = "CLEARED";
  }
 }
 else
 {
  switch(global.selectedStage)
  {
   case 77: 
    stageName = "Extra stage";
    temp = "95% energy required";
    break;
   case 83:
    stageName = "SHUTDOWN";
    if(totalEnergy &lt; 100)
     temp = "100% energy required";
    else
     temp = "CHARGED";
    break;
   default:
    stageName = "???";
    temp = "LOCKED";
  }
 }
 if(mainText3 != temp)
 {
  mainText3 = temp;
  mainText3Length = string_length(mainText3);
  mainText3ScrollDelay = 10;
  mainText3StartPos = 1;
 }
 
 temp = stageName;
 if(mainText2 != temp)
 {
  mainText2 = temp;
  mainText2Length = string_length(mainText2);
  mainText2ScrollDelay = 10;
  mainText2StartPos = 1;
 }

 if(scrButtonCheck(global.shootButton) &amp;&amp; !shutdown)
 {
  if(global.stageUnlocked[global.selectedStage] &amp;&amp; global.selectedStage != 83)
  {
   scrObjectDestroy(objPlayer);
   io_clear();
   if(global.selectedStage == 58 ||
      global.selectedStage == 70 ||
      global.selectedStage == 74 ||
      global.selectedStage == 78 ||
      global.selectedStage == 79 ||
      global.selectedStage == 80 ||
      global.selectedStage == 81 ||
      global.selectedStage == 82 ||
      global.selectedStage == 84 )
      global.autosave = true;
   room_goto(global.stageRoom[global.selectedStage]);
  }
  if(global.selectedStage == 83 &amp;&amp; totalEnergy == 100)
  {   
   audio_sound_gain(global.currentMusic,0,2000);
   io_clear();
   instance_change(objComputerShutdown,true);
  }
 }
}
else
{
 global.noShoot = false;
 temp = "WARP ENGINE";
 if(mainText != temp)
 {
  mainText = temp;
  mainTextLength = string_length(mainText);
  mainTextScrollDelay = 10;
  mainTextStartPos = 1;
 }
  
 if (global.controllerMode)
  key = scrGetControllerBind(global.alignRightButton[1]);
 else
  key = scrGetKeybind(global.alignRightButton[0]);
 temp = "Press " + key + " to return here";
 if(mainText2 != temp)
 {
  mainText2 = temp;
  mainText2Length = string_length(mainText2);
  mainText2ScrollDelay = 10;
  mainText2StartPos = 1;
 }
 
 temp = "Touch to use";
 if(mainText3 != temp)
 {
  mainText3 = temp;
  mainText3Length = string_length(mainText3);
  mainText3ScrollDelay = 10;
  mainText3StartPos = 1;
 }
 //event_user(0);
}
if(binI mod 10 == 0)
{
  binData += string(choose(0,1));
}
  
binI++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_font(fJoystix8);
draw_set_valign(fa_top);
draw_set_halign(fa_center);
draw_set_color(c_green);

draw_text(x+118,y+8,currentString1);

draw_set_halign(fa_left);
draw_text(x+15,y+24,currentString2);

draw_set_halign(fa_center);
draw_text(x+118,y+40,currentString3);

draw_set_font(fJoystix12);
draw_set_halign(fa_left);
var binLength = string_length(binData);
var row = 5;
for(var temp = binLength-1; temp &gt;= 0; temp-=5)
{
 draw_text(x+165,y+77+(13*row),string_copy(binData,temp-5,5));
 row--;
 if(row &lt; 0)
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
