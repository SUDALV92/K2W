<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objExStageController</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phase = 1;
tile_layer_hide(101);
tile_layer_hide(102);
tile_layer_hide(103);
tile_layer_hide(104);
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(all)
{
    type = "";
}
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(phase)
{
    case 1:
         tile_layer_hide(101);
         with(objExStage4Up)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewUp;
          else sprite_index = sprPtSpikebUp;
         }
         with(objExStage4Down)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewDown;
          else sprite_index = sprPtSpikebDown;
         }
         with(objExStage4Left)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewLeft;
          else sprite_index = sprPtSpikebLeft;
         }
         with(objExStage4Right)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewRight;
          else sprite_index = sprPtSpikebRight;
         }
         
         invert = instance_create(144,384,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(384,352,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(560,384,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(208,224,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(368,160,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(176,32,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(336,32,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(592,32,objPhantomr);
         invert.type = "Phantom";
         
         scrCreateWarp(328,160,0.5,3,2);
         break;
    case 2:
    case 5:
         tile_layer_hide(100);
         tile_layer_show(101);
         background_visible[0] = false;
         background_visible[1] = true;
         background_visible[2] = false;
         
         scrExTrapsChange4(sprSpikeUp,sprSpikeDown,sprSpikeLeft,sprSpikeRight);
         scrExHTBlockSetVisibility(false);
         with(all)
         {
          if(type == "Phantom")
                  instance_destroy();
         }
         
         pf = instance_create(416,160,objMovingPlatform);
         pf.type = "Miku";
         
         pf = instance_create(160,384,objMovingPlatform);
         pf.type = "Miku";
         
         apple = instance_create(80,144,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(304,128,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(656,240,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(272,320,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(560,400,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(144,464,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(208,496,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(240,496,objCherry);
         apple.type = "Miku";
         
         apple = instance_create(464,496,objCherry);
         apple.type = "Miku";
         if(phase == 2)
                  scrCreateWarp(416,464,1,0.5,3);
         else if(phase == 5)
              scrCreateWarp(328,160,0.5,3,6);
         break;
    case 3:
         tile_layer_hide(101);
         tile_layer_show(100);
         background_visible[0] = true;
         background_visible[1] = false;
         with(all)
         {
          if(type == "Miku")
                  instance_destroy();
         }
         with(objExStage4Up)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewUp;
          else sprite_index = sprPtSpikebUp;
         }
         with(objExStage4Down)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewDown;
          else sprite_index = sprPtSpikebDown;
         }
         with(objExStage4Left)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewLeft;
          else sprite_index = sprPtSpikebLeft;
         }
         with(objExStage4Right)
         {
          if(phantomType == 0)
                         sprite_index = sprPtSpikewRight;
          else sprite_index = sprPtSpikebRight;
         }
         
         invert = instance_create(144,384,objPhantomr);
         invert.type = "Phantom";
         
         invert = instance_create(384,352,objPhantomr);
         invert.type = "Phantom";
         
         scrCreateWarp(64,304,0.5,3.5,4);
         break;
    case 4:
    case 6:
         tile_layer_hide(100);
         tile_layer_hide(101);
         background_visible[0] = false;
         background_visible[2] = true;
         scrExHTBlockSetVisibility(true);
         with(all)
         {
          if(type == "Miku")
                  instance_destroy();
         }
         with(objExStage4Up)
         {
          sprite_index = sprHv2SpikeUp;
          image_speed=0;
          image_index=irandom(3); 
         }  
         with(objExStage4Right)
         {
          sprite_index = sprHv2SpikeRight;
          image_speed=0;
          image_index=irandom(3); 
         }
         with(objExStage4Down)
         {
          sprite_index = sprHv2SpikeDown;
          image_speed=0;
          image_index=irandom(3); 
         }
         with(objExStage4Left)
         {
          sprite_index = sprHv2SpikeLeft;
          image_speed=0;
          image_index=irandom(3); 
         }
         
         
         trigger = instance_create(160,384,objFreeTrigger);
         trigger.type = "";
         trigger.trg = 1;
         trigger.image_xscale = 0.5;
         trigger.image_yscale = 3;
         
         trigger = instance_create(320,320,objFreeTrigger);
         trigger.type = "";
         trigger.trg = 2;
         trigger.image_xscale = 0.5;
         trigger.image_yscale = 3;
         
         trigger = instance_create(384,352,objFreeTrigger);
         trigger.type = "";
         trigger.trg = 3;
         trigger.image_xscale = 0.5;
         trigger.image_yscale = 3;
         
         if(phase == 4)
                  scrCreateWarp(416,464,1,1,5);
         else if(phase == 6)
         {
          warp = instance_create(736,448,objRoomChanger);
          warp.type = "";
          warp.roomTo = rExStage4B;
          warp.smoothTransition = true;
          
          trigger = instance_create(128,224,objFreeTrigger);
          trigger.type = "";
          trigger.trg = 4;
          
          trigger = instance_create(64,160,objFreeTrigger);
          trigger.type = "";
          trigger.trg = 5;
          with(ExHvTrap7)
          {          
           trp = instance_create(x+16,y+16,objHv2trap7);
           trp.type = "";
           instance_destroy();          
          }
          with(ExHvFakeBlock)
          {
           block = instance_create(64,160,objBlockFake);
           block.type = "";
           block.sprite_index = sprExHTBlock;
           block.image_speed = 0;
           block.image_index = irandom(3);
           instance_destroy();
          }
         }
         break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
