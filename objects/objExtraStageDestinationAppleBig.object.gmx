<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprYellowCherry</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlayerKiller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=1/10;
mode = 1;
//1 - targeting
//2 - random(360) speed 10
//3 - targetting circle
//4 - curving circle
//5 - target to predictor
//6 - random(360) speed 6
//7 - player contact locus
image_xscale = 2;
image_yscale = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(mode)
{
 case 1:
    if(instance_exists(objPlayer))
    {
     angle = point_direction(x,y,objPlayer.x,objPlayer.y);
    }
    else
    {
     angle = random(360);
    }
     repeat(8)
     {
      apple = instance_create(x,y,objExtraStageDestinationAppleSmall);
      apple.direction = angle;
      apple.sprite_index = sprite_index;
      apple.speed = 8;
      angle+= 360/8;
     }      
    instance_destroy();  
    break;
 case 2:
     angle = random(360);
     repeat(8)
     {
      apple = instance_create(x,y,objExtraStageDestinationAppleSmall);
      apple.direction = angle;
      apple.sprite_index = sprite_index;
      apple.speed = 8;
      angle+= 360/8;
     } 
     instance_destroy();
     break;
 case 3:
     if(instance_exists(objPlayer))
     {
      apple = instance_create(x,y,objExtraStageDestinationAppleCore);
      apple.direction = point_direction(x,y,objPlayer.x,objPlayer.y) + random_range(-20,20);
      apple.speed = 4;
     }
     instance_destroy();
     break;
 case 4:
      angle = random(360);
      curving = choose(random_range(0.5,1),random_range(-1,-0.5))
      repeat(10)
      {
       apple = instance_create(x,y,objExtraStageDestinationAppleSmall);
       apple.direction = angle;
       apple.sprite_index = sprite_index;
       apple.speed = 5;
       apple.curving = curving;
       angle+= 360/10;
      } 
      instance_destroy();
      break;
 case 5:
      speed = 0;
      predictor = instance_nearest(x,y,objExtraStageDestinationApplePredictor);
      instance_destroy(predictor);
      break;
 case 6:
     angle = random(360);
     repeat(8)
     {
      apple = instance_create(x,y,objExtraStageDestinationAppleSmall);
      apple.direction = angle;
      apple.sprite_index = sprite_index;
      apple.speed = 6;
      angle+= 360/8;
     } 
     instance_destroy();
     break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(mode)
{
 case 7:
    if(instance_exists(objPlayer))
    {
     if(abs(objPlayer.x - x) &lt; 20)
     {
      mode = 1;
      alarm[0] = 20;
     }
    }
    if(hspeed &lt; 0 &amp;&amp; x &lt; 50) || (hspeed &gt; 0 &amp;&amp; x &gt; 750)
    {
     mode = 1;
     alarm[0] = 1;
    }
    break;
 case 8:
    if(instance_exists(objPlayer))
    {
     if((hspeed != 0 &amp;&amp; abs(objPlayer.x - x) &lt; 10) || 
        (vspeed != 0 &amp;&amp; abs(objPlayer.y - y) &lt; 10))
     {
      mode = 2;
      alarm[0] = 1;
     }     
    }
    if(hspeed &lt; 0 &amp;&amp; x &lt; 50) || 
      (hspeed &gt; 0 &amp;&amp; x &gt; 750) ||
      (vspeed &lt; 0 &amp;&amp; y &lt; 50) ||
      (vspeed &gt; 0 &amp;&amp; y &gt; 558)
    {
     mode = 2;
     alarm[0] = 1;
    }    
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
