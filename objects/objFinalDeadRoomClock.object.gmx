<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFinalDeadRoomCircle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//random_set_seed(1);
for(var i = 0; i &lt; 12; i++)
{
 cells[i] = -1;
}
N = irandom(11);
value = irandom_range(1,6);
cells[N] = value;
fillN = 1;
iterations = 0;
oldFillN = 1;

while(fillN &lt; 12)
{ 
    oldFillN = fillN;
    value = irandom_range(1,6);
    shift = choose(-1,1);
    nextN = N+value*shift;
    if(nextN &gt; 11)
     nextN = 0;
    else if(nextN &lt; 0)
     nextN = 11;
    if(cells[nextN] == -1)
    {
     cells[nextN] = value;
     fillN++;
     N = nextN;
    }
    if(oldFillN == fillN)
    {
     iterations++;
     if(iterations == 15) //невозможный рандом, начнём с начала
     {
        for(var i = 0; i &lt; 12; i++)
        {
         cells[i] = -1;
        }
        N = irandom(11);
        value = irandom_range(1,6);
        cells[N] = value;
        fillN = 1;
        iterations = 0;
        oldFillN = 1;
     }
    }
}
handL = 0;
handLAngle = 0;
handR = 0;
handRAngle = 0;
pointer = 0;
targetL = 0;
targetR = 0;
rotation = 0;
rotateDone[1] = false;
phase = -1; //-1 = init; 0 = idle; 1 = set direction; 2 = to target; 3,4 = from target by value
t = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(phase)
{
 case -1: //init state
  handL = pointer;
  handR = pointer;
  repeat(3)
  {
      if(angle_difference(handLAngle,pointer*30) &gt; 0)
      {
       handLAngle --;
       handRAngle = handLAngle;
      }
      else 
       rotateDone[0] = true;
      if(angle_difference(handLAngle,pointer*30) &lt; 0)
      {
       handLAngle ++;
       handRAngle = handLAngle;
      }
      else 
       rotateDone[1] = true;
  }  
  break;
 case 0: //idle
  break;
 case 1: //to pointer
  repeat(3)
  {
      diffL = angle_difference(handLAngle,pointer*30)
      if(diffL &gt; 0)
      {
       handLAngle--;
      }
      else if(diffL &lt; 0)
      {
       handLAngle++;
      }
      else 
       rotateDone[0] = true;
       
      diffR = angle_difference(handRAngle,pointer*30);
      if(diffR &lt; 0)
      {
       handRAngle++;
      }
      else if(diffR &gt; 0)
      {
       handRAngle--;
      }
      else 
       rotateDone[1] = true;
  }
  if(rotateDone[0] &amp;&amp; rotateDone[1])
  {
   phase = 2;
   rotateDone[0] = false;
   rotateDone[1] = false;
  }
  break;
 case 2: //wait
  if(t == 30)
  {
   t = 0;
   phase = 3;
   audio_play_sound(global.sndClock2,0,0);
  }
  t++;
  break;
 case 3: //to target
  repeat(3)
  {
      diffL = angle_difference(handLAngle,handL*30)
      if(diffL &gt; 0 || diffL == -180)
      {
       handLAngle--;
      }
      else if(diffL &lt; 0)
      {
       handLAngle++;
      }
      else 
       rotateDone[0] = true;
       
      diffR = angle_difference(handRAngle,handR*30);
      if(diffR &lt; 0)
      {
       handRAngle++;
      }
      else if(diffR &gt; 0)
      {
       handRAngle--;
      }
      else 
       rotateDone[1] = true;
  }
  if(rotateDone[0] &amp;&amp; rotateDone[1])
  {
   audio_play_sound(global.sndClock3,0,0);
   phase = 0;
   if(cells[handL] != -1)
    pointer = handL;
   else if(cells[handR] != -1)
    pointer = handR;
   else
   {
    death = false;
    for(var i = 0; i &lt; 11; i++)
    {
     if(cells[i] != -1)
     {
      death = true;
      break;
     }
    }
    if(death)
     scrKillPlayer();
    else
    {
     //CLEAR
     instance_destroy();
    }
   }
   handLAngle = handL * 30;
   handRAngle = handR * 30;
  }
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
for(var temp = 0; temp &lt; 12; temp++)
{
 switch(cells[temp])
 {
  case -1:
   break;
  default:
   draw_sprite_ext(sprFinalDeadRoomDigit,cells[temp]-1,x+lengthdir_x(170,temp*30),y+lengthdir_y(170,temp*30),1,1,0,c_white,1);
 }
}
draw_sprite_ext(sprFinalDeadRoomHand,0,x,y,1,1,handLAngle-90,c_white,1);
draw_sprite_ext(sprFinalDeadRoomHand,0,x,y,1,1,handRAngle-90,c_white,1);
draw_sprite_ext(sprFinalDeadRoomPointer,0,x,y,1,1,pointer*30,c_white,1);

/*scrDrawTextOutline(50,50,"handL = " + string(handL),c_white,c_black);
scrDrawTextOutline(50,70,"handR = " + string(handR),c_white,c_black);
scrDrawTextOutline(50,90,"pointer = " + string(pointer),c_white,c_black);
scrDrawTextOutline(50,110,"handLAngle = " + string(handLAngle),c_white,c_black);
scrDrawTextOutline(50,130,"handRAngle = " + string(handRAngle),c_white,c_black);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
