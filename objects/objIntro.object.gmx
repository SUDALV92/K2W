<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrPlayMusic(global.sndIntro,0);
i=0;
warp = false;
background_alpha[0] = 0;
background_yscale = 2;
t = 0;
backgroundPulse = false;
bgPulseI = 0;

i = 600;
t = 600;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(scrButtonCheck(global.jumpButton))
{
 audio_stop_all();
 room_goto(rTitle);
}

if(warp)
{
 if(i &gt; 0 &amp;&amp; i &lt; 150)
 {
  view_wview[0]++;
  view_hview[0] = view_wview[0]*19/25;
  view_xview[0]-=0.3;
  view_yview[0]-=0.3;
 }
 if(i &gt;= 150 &amp;&amp; i &lt; 400)
 {
  view_wview[0]+=3.5;
  view_hview[0] = view_wview[0]*19/25;
  view_xview[0]-=1.1;
  view_yview[0]-=2;
 }
 if(i == 100)
 {
  with(objPlayerDoll)
  {
   isWarping = true;
  }
 }
 if(i == 150)
 {
  with(objIntroComputer)
  {
   isWarping = true;
  }
 }
 if(i == 200)
 {
  with(objIntroHouseInside)
  {
   isWarping = true;
  }
 }
 if(i == 250)
 {
  with(objIntroTrees)
  {
   isWarping = true;
  }
  objIntroTitle.grid = true;
 }
 if(i &gt; 250 &amp;&amp; i &lt;= 300)
 {
  background_alpha[0]+=0.02;  
 }
 if(i &gt; 250 &amp;&amp; i &lt;= 350)
 {
  objIntroTitle.image_alpha += 0.01;
 }
 if(i &gt;= 550 &amp;&amp; i &lt; 600)
 {
  background_colour = c_black;
  view_wview[0]+=200;
  view_hview[0] = view_wview[0]*19/25;
  view_xview[0]-=100;
  view_yview[0]-=100;
  with(objIntroWhiteStick)
  {
   image_alpha -= 0.02;
  }
 }
 if(i == 600)
 {  
  x = 400;
  y = 304;
  room_goto(rIntro2);  
 }
 //scene 2
 if(i == 601)
 {
  background_alpha[3] = 0;
  backgroundPulse = true;
 }
 if(i &gt; 600 &amp;&amp; i &lt; 650)
 {
  background_alpha[1] -= 0.02;
  var tiles = tile_get_ids();
  for (var temp = 0; temp &lt; array_length_1d(tiles); temp++;)
  {
   tile_set_alpha(tiles[temp], 0.5);
  }
 }
 if(i == 650)
 {
  doll = instance_create(96,352,objPlayerDoll);
  doll.unWarping = true;
  doll.image_alpha = 0;
 }
 if(i == 670)
 {
  for(var gridIndex = -128; gridIndex &lt;= 864; gridIndex += 45)
  {
   vline = instance_create(gridIndex,-100,objGridSource);
   vline.image_angle = 270;   
  }  
 }
 if(i == 810)
 {
  for(var gridIndex = -256; gridIndex &lt;= 864; gridIndex += 45)
  {
   hline = instance_create(-100,gridIndex,objGridSource);
   hline.image_angle = 0;
  }
 } 
 
 if(i &gt;= 671 &amp;&amp; i &lt;= 800)
 {
  with(objGridSource)
  {
    if(image_angle == 270)
     image_xscale += 0.1;
  }
 }
 if(i &gt;= 811 &amp;&amp; i &lt;= 900)
 {
  with(objGridSource)
  {
    if(image_angle == 0)
     image_xscale += 0.1;
  }
 }
 if(i == 910)
 {
  with(objGridSource)
  {
   sprite_index = sprGridSource;
   
      
   if(image_angle == 0)
   {
    x = 400;    
   }
   if(image_angle == 270)
   {
    y = 304;
   }
   gridAngle = point_direction(400,304,x,y);
   distance = point_distance(x,y,400,304);
  }
 }
 if(i &gt;= 961 &amp;&amp; i &lt;= 1060)
 {
  with(objGridSource)
  {
   x = 400 + lengthdir_x(distance,gridAngle);
   y = 304 + lengthdir_y(distance,gridAngle);
   gridAngle-=0.5;
   image_angle-=0.5;
  }
 }
 if(i &gt; 1060 &amp;&amp; i &lt;= 1100)
 {
  with(objGridSource)
  {
   image_yscale += 0.05;
  }
 }
 if(i &gt;= 1085 &amp;&amp; i &lt; 1145)
 {
  if(i % 2 == 0)
  {
   view_xview[0] = irandom_range(-10,10);
   view_yview[0] = irandom_range(-10,10);
  }
 }
 if(i == 1145)
 {
  view_xview[0] = 0;
  view_yview[0] = 0;
 }
 /*if(i &gt; 1100 &amp;&amp; i &lt; 1175)
 {
  
  with(objGridSource)
  {
   image_alpha -= 0.05;
  }  
 }*/
 if(i == 1140)
 {
  backgroundPulse = false;
  background_visible[0] = false;
  background_visible[2] = true;
  instance_destroy(objGridSource);
  background_hspeed[2] = -1.5;
  background_vspeed[2] = -1.5;
 }
 if(i &gt;= 1150 &amp;&amp; i &lt; 1250 &amp;&amp; i % 50 == 0)
 {
  
 }
 if(i == 1150)
 {  
  instance_create(0,0,objExTransition);
  with(objSpikeUp)
  {
   image_speed = 0.4;
   image_alpha = 1;
  }
 }
 if(i == 1200)
 {
  instance_create(32,-32,objIntroGravitySpike);
  instance_create(64,-64,objIntroGravitySpike);
  instance_create(96,-96,objIntroGravitySpike);
  instance_create(128,-128,objIntroGravitySpike);
  objPlayerDoll.hspeed = 3;
 }
 if(i == 1210)
 {
  with(objPlayerDoll) event_user(0); //jump
 }
 if(i == 1300)
 {
  objPlayerDoll.hspeed = 0;
  with(objBlack) boss6var = 2;
  
  instance_create(0,0,objExTransition);
  with(objIntroBlock)
  {
   visible = true;
   image_speed = 0.4;
  }
 }
 if(i == 1380)
 {
  cherry = instance_create(900,300,objIntroOrangeCherry);
  cherry.image_xscale = 2;
  cherry.image_yscale = 2;
  cherry.hspeed = -15;
  cherry.friction = 0.4;
 }
 if(i == 1430)
 {
  var temp = 0;
  repeat(12)
  {
   miniCherry = instance_create(cherry.x,cherry.y,objIntroOrangeCherry);
   miniCherry.direction = temp;
   miniCherry.speed = 2;
   temp+=360/12;
  }
  instance_destroy(cherry);
 }
 if(i == 1440)
 {
  instance_create(0,0,objExTransition);
 }
 if(i == 1490)
 {
  with(objIntroOrangeCherry)
  {
   //curving = random_range(-2,2);
   sprite_index = sprCyberBulletA;
   image_angle = direction;
  }
 }
 if(i == 1530)
 {
  with(objIntroOrangeCherry)
  {
   direction = point_direction(x,y,objPlayerDoll.x,objPlayerDoll.y);
   image_angle = direction;
   speed = -5;
   gravity_direction = direction;
   gravity = 0.4;
   curving = 0;
  }
  
 }
 if(i == 1560)
 {
  objPlayerDoll.hspeed = -3;
  with(objPlayerDoll) event_user(0);
 }
 if(i == 1580)
 {
    objPlayerDoll.hspeed = 1;
    with(objPlayerDoll) event_user(0);
 }
 if(i == 1600)
 {
  view_object[0] = objPlayerDoll;
  view_hborder[0] = 400;
  view_vborder[0] = 304;
 }
 if(i &gt; 1600 &amp;&amp; i &lt; 1700)
 {
  view_wview[0] -= 6;
  view_hview[0] = view_wview[0]*19/25;
 }
 if(i == 1700)
 {
  objPlayerDoll.hspeed = 0;
 }
 i++;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///music sync
if( abs( audio_sound_get_track_position(global.currentMusic) * 50 - t ) &gt; 5 ) 
{
 audio_sound_set_track_position(global.currentMusic, t/50);
}
t++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///backgroundPulse
if(backgroundPulse)
{
 if(bgPulseI &lt; 50)
  background_alpha[3] += 0.002;
 else if(bgPulseI &gt; 50 &amp;&amp; bgPulseI &lt;= 100)
 {
  background_alpha[3] -= 0.002;
 }
 bgPulseI+=1;
 if(bgPulseI &gt; 100)
 {
  bgPulseI = 0;
  background_alpha[3] = 0;
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room)
{
 case rIntro:
 case rIntro2:
  break;
 default:
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_right);
scrDrawTextOutline(800,50,string(i),c_white,c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
