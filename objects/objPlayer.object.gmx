<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frozen = false; //sets if the player can move or not

jump = 8.5 * global.grav; //set how fast the player jumps
jump2 = 7 * global.grav; //sets how fast the player double jumps
gravity = 0.4 * global.grav; //player gravity

djump = 1; //allow the player to double jump as soon as he spawns
maxSpeed = 3;   //max horizontal speed (see room start event)
maxVspeed = 9;  //max vertical speed
image_speed = 0.2; //initial speed of animation
onPlatform = false; //sets if player is currently standing on a platform
reverse = false; //sets reverse controls
Upp = false;
xScale = 1; //sets the direction the player is facing (1 is facing right, -1 is facing left)
cleaning = false;
xSize = 1;
spriteIdle = sprPlayerIdle;
spriteJump = sprPlayerJump;
spriteFall = sprPlayerFall;
spriteRunning = sprPlayerRunning;
spriteSliding = sprPlayerSliding;
spriteMask = sprPlayerMask;
spriteMaskFlipped = sprPlayerMaskFlip;
showItems = false;
itemsDir = 0;
itemsAlpha = 0;
infJump = false; //draw text
infJumpAlpha = 0;
clockControl = false;
clockControlAlpha = 0;
counter = 0;
shootDelay = 5;
invertedControls = false;

scrSetPlayerMask(); //set the player's hitbox

if (global.autosave) //save the game if currently set to autosave
{
    scrSaveGame(true);
    global.autosave = false;
}

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//when the player is destroyed, also destroy the bow

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.grav = global.checkpoint[2];
instance_create(global.checkpoint[0],global.checkpoint[1],objPlayer);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((x &lt; 0 || x &gt; room_width || y &lt; 0 || y &gt; room_height) &amp;&amp; global.edgeDeath)  //check if player has left the room
    scrKillPlayer();

//update player sprite
if (global.playerAnimationFix)
{
    //block/vine checks
    var notOnBlock = (place_free(x,y+(global.grav)));
    var onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);
    var onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
    
    if (!onVineR &amp;&amp; !onVineL)   //not touching any vines
    {
        if (onPlatform || !notOnBlock)  //standing on something
        {
            //check if moving left/right
            var L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)));
            var R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)));
            
            if ((L || R) &amp;&amp; !frozen)
            {
                sprite_index = spriteRunning;
                image_speed = 1/2;
            }
            else
            {
                sprite_index = spriteIdle;
                image_speed = 1/5;
            }
        }
        else    //in the air
        { 
            if ((vspeed * global.grav) &lt; 0)
            {
                sprite_index = spriteJump;
                image_speed = 1/2;
            }
            else
            {
                sprite_index = spriteFall;
                image_speed = 1/2;
            }
        }
    }
    else    //touching a vine
    {
        sprite_index = spriteSliding;
        image_speed = 1/2;
    }
}

switch(room)
{
    case rStage6Popularity:
        if x&gt;room_width x=1;
        else if x&lt;0 x=room_width-1;
        break;
    case rBoss6GravityMan:
        if(maxVspeed &lt; 16)
        {
            maxVspeed = 16;
            vspeed = -12;
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Upp)
{
    vspeed=-8;
    effect_create_above(ef_flare,x+random_range(-5,5),y+random_range(2,5),0,make_colour_rgb(255,128,0));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check left/right button presses
var L = (scrButtonCheck(global.leftButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.leftButton)));
var R = (scrButtonCheck(global.rightButton) || (global.directionalTapFix &amp;&amp; scrButtonCheckPressed(global.rightButton)));
if(invertedControls)
{
 var temp = L;
 L = R;
 R = temp;
}
var h = 0;

if (!frozen)    //don't move if frozen
{
    if (R)
    {   
        if(reverse) h = -1;
        else h = 1;
    }
    else if (L)
    {   
        if(reverse) h = 1;
        else h = -1;
    }
}

var slipBlockTouching = instance_place(x,y+(1*global.grav),objSlipBlock);   //check if on a slip block

//vine checks
var notOnBlock = (place_free(x,y+(global.grav)));
var onVineL = (place_meeting(x-1,y,objWalljumpL) &amp;&amp; notOnBlock);
var onVineR = (place_meeting(x+1,y,objWalljumpR) &amp;&amp; notOnBlock);

if (h != 0)  //player is moving
{
    if (!onVineR &amp;&amp; !onVineL)   //make sure not currently touching a vine
    {
        xScale = h;
    }
    if ((h == -1 &amp;&amp; !onVineR) || (h == 1 &amp;&amp; !onVineL))
    {
        if (slipBlockTouching == noone) //not touching a slip block, move immediately at full speed
        {
            hspeed = maxSpeed * h;
        }
        else    //touching a slip block, use acceleration
        {
            if(slipBlockTouching.slip == 0)
            {
             hspeed = maxSpeed * h;
            }
            else
            {
             hspeed += (slipBlockTouching.slip) * h;
            
             if (abs(hspeed) &gt; maxSpeed)
                hspeed = maxSpeed * h;
            }
        }
        
        sprite_index = spriteRunning;
        image_speed = 0.5;
    }
}
else    //player is not moving
{
    if (slipBlockTouching == noone) //not touching a slip block, stop immediately
        hspeed = 0;
    else    //touching a slip block, slow down
    {
        if(slipBlockTouching.slip == 0)
         hspeed = 0;
        else
        {
            if (hspeed &gt; 0)
            {
                hspeed -= slipBlockTouching.slip;
                
                if (hspeed &lt;= 0)
                    hspeed = 0;
            }
            else if (hspeed &lt; 0)
            {
                hspeed += slipBlockTouching.slip;
                
                if (hspeed &gt;= 0)
                    hspeed = 0;
            }
        }
    }
  
    sprite_index = spriteIdle;
    image_speed = 0.2;
}


if (!onPlatform)    //check if standing on a platform
{
    if((vspeed * global.grav) &lt; -0.05) {sprite_index = spriteJump;}
    else if((vspeed * global.grav) &gt; 0.05) {sprite_index = spriteFall;}
}
else
{
    if (!place_meeting(x,y+(4*global.grav),objPlatform)) {onPlatform = false;}
    if(global.phaseSave)
    {
        scrSaveGame(true);
        global.phaseSave = false;
    }
}

var slideBlockTouching = instance_place(x,y+(global.grav),objSlideBlock);   //check if on a slide block

if (slideBlockTouching != noone)    //on a slide block, start moving with it
    hspeed += slideBlockTouching.h;
    
var slideWaterTouching = instance_place(x,y,objWater3LHM);
if(slideWaterTouching != noone)
    hspeed += slideWaterTouching.h

if (abs(vspeed) &gt; maxVspeed) {vspeed = sign(vspeed)*maxVspeed;} //check if moving vertically faster than max speed

if(shootDelay &gt; 0)
 shootDelay--;
 
if (!frozen)    //check if frozen before doing anything
{
    if (global.autoFire &amp;&amp; shootDelay &lt;= 0 &amp;&amp; scrButtonCheck(global.shootButton) &amp;&amp; global.skin != 1)
    {
        scrPlayerShoot();
        shootDelay = 7;
    }
    else if(!global.autoFire &amp;&amp; scrButtonCheckPressed(global.shootButton) &amp;&amp; global.skin != 1)
    {
        scrPlayerShoot();
    }
    if (scrButtonCheckPressed(global.jumpButton))
        scrPlayerJump();
    if (scrButtonCheckReleased(global.jumpButton))
        scrPlayerVJump();
}

//walljumps

if (onVineL || onVineR)
{
    if (onVineR)
        xScale = -1;
    else
        xScale = 1;
    
    vspeed = 2 * global.grav;
    sprite_index = spriteSliding;
    image_speed = 1/2;
    
    //pressed away from the vine
    if (onVineL &amp;&amp; scrButtonCheckPressed(global.rightButton)) || (onVineR &amp;&amp; scrButtonCheckPressed(global.leftButton))
    {
        if (scrButtonCheck(global.jumpButton))  //jumping off vine
        {
            if (onVineR)
                hspeed = -15;
            else
                hspeed = 15;
            
            vspeed = -9 * global.grav;
            audio_play_sound(global.sndWallJump,0,false);
            sprite_index = spriteJump;
        }
        else    //moving off vine
        {
            if (onVineR)
                hspeed = -3;
            else
                hspeed = 3;
            
            sprite_index = spriteFall;
        }
    }
}

//slopes

if (instance_exists(objSlope) &amp;&amp; hspeed != 0)
{
    var moveLimit = abs(hspeed);    //sets how high/low the player can go to snap onto a slope, this can be increased to make the player able to run over steeper slopes (ie setting it to abs(hspeed)*2 allows the player to run over slopes twice as steep)
    
    var slopeCheck;
    var hTest;
    
    var ySlope;
    
    //falling onto a slope
    if (place_meeting(x+hspeed,y+vspeed+gravity,objSlope) &amp;&amp; (vspeed+gravity)*global.grav &gt; 0 &amp;&amp; notOnBlock)
    {
        var xLast = x;
        var yLast = y;
        var hLast = hspeed;
        var vLast = vspeed;
        
        vspeed += gravity;
        
        x += hspeed;
        hspeed = 0;
        
        if(!place_free(x,y+vspeed))
        {
            if (global.grav == 1)   //normal
                move_contact_solid(270,abs(vspeed));
            else    //flipped
                move_contact_solid(90,abs(vspeed));
            vspeed = 0;
        }
        
        y += vspeed;            
        
        if (!place_free(x,y+(global.grav)) &amp;&amp; place_free(x,y))  //snapped onto the slope properly
        {
            djump = 1;
            notOnBlock = false;
        }
        else    //did not snap onto the slope, return to previous position
        {
            x = xLast;
            y = yLast;
            hspeed = hLast;
            vspeed = vLast;
        }
    }
    
    //moving down a slope
    if (!notOnBlock)
    {
        var onSlope = (place_meeting(x,y+(global.grav),objSlope));    //treat normal blocks the same as slopes if we're standing on a slope
        
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            //check how far we should move down
            while ((!place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; !place_meeting(x+hTest,y-ySlope+(global.grav),objBlock))) &amp;&amp; ySlope*global.grav &gt; -floor(moveLimit*(hTest/hspeed)))
            {
                ySlope -= global.grav;
            }
            
            //check if we actually need to move down
            if (place_meeting(x+hTest,y-ySlope+(global.grav),objSlope) || (onSlope &amp;&amp; place_meeting(x+hTest,y-ySlope+(global.grav),objBlock)))
            {
                if (ySlope != 0 &amp;&amp; !place_meeting(x+hTest,y-ySlope,objBlock))
                {
                    y -= ySlope;
                    
                    x += hTest;
                    hspeed = 0;
                    
                    slopeCheck = false;
                }
                else
                {
                    if (hTest &gt; 0)
                    {
                        hTest -= 1;
                        if (hTest &lt;= 0)
                            slopeCheck = false;
                    }
                    else if (hTest &lt; 0)
                    {
                        hTest += 1;
                        if (hTest &gt;= 0)
                            slopeCheck = false;
                    }
                    else
                    {
                        slopeCheck = false;
                    }
                }
            }
            else
            {
                slopeCheck = false;
            }
        }
    }
    
    //moving up a slope
    if (place_meeting(x+hspeed,y,objSlope))
    {
        slopeCheck = true;
        hTest = hspeed;
        
        while (slopeCheck)
        {
            ySlope = 0;
            
            //check how far we have to move up
            while (place_meeting(x+hTest,y-ySlope,objSlope) &amp;&amp; ySlope*global.grav &lt; floor(moveLimit*(hTest/hspeed)))
            {
                ySlope += global.grav;
            }
            
            //check if we actually need to move up
            if (place_free(x+hTest,y-ySlope))
            {            
                y -= ySlope;
                
                x += hTest;
                hspeed = 0;
                
                slopeCheck = false;
            }
            else
            {
                if (hTest &gt; 0)
                {
                    hTest -= 1;
                    if (hTest &lt;= 0)
                        slopeCheck = false;
                }
                else if (hTest &lt; 0)
                {
                    hTest += 1;
                    if (hTest &gt;= 0)
                        slopeCheck = false;
                }
                else
                {
                    slopeCheck = false;
                }
            }
        }
    }
    
    //set xprevious/yprevious coordinates for future solid collisions
    xprevious = x;
    yprevious = y;
}

if (cleaning)
{
    image_angle+=8;
}

image_xscale = xSize * sign(image_xscale);

if(scrButtonCheckPressed(global.suicideButton))
{
    if(global.autoFire == 1)
     global.autoFire = 0;
    else
     global.autoFire = 1;
     
    audio_play_sound(global.sndWeaponCHange,0,0); 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Extra stuff
itemsDir++;
skipable = true;
for (var i = global.secretItemTotal-1; i &gt;= 0; i--)
{
    if(global.tempItem[i])
    {
     skipable = false;
     break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///abyss lines
switch(room)
{
 case rPreAbyss:
  scrObjectDestroy(oRedLineImpulse);
  line1 = instance_place(x,y+10,oRedLightLine);
  if(instance_exists(line1))
  {
   flash1 = scrRedCreateActiveImpulse( line1, x-line1.x, c_teal, 1 );
   flash1.image_xscale = 2;
  }
  line2 = instance_place(x,y+37,oRedLightLine);
  if(instance_exists(line2))
  {
   flash2 = scrRedCreateActiveImpulse( line2, x-line2.x, c_teal, 1 );
   flash2.image_xscale = 2;
  }
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnergy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.active)
{
    if(other.energyID != -1)
        global.energy[other.energyID] = true;
        
    if(global.sfxDelay[2] &lt;= 0)
    {
     audio_play_sound(global.sndEnergyCollect,0,0);
     global.sfxDelay[2] = 1;
    }
    scrObjectDestroy(other);
    with(objWorld)
    {
     drawEnergy = true;
     alarm[3] = 100;
    }
    var totalEnergy = 0;
    for(var temp = 0; temp &lt; 100; temp++)
    {
     if(global.energy[temp])
      totalEnergy++;
    }
    if(totalEnergy &gt;= 95)
    {
     global.stageUnlocked[77] = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.grav == 1)   //normal
{
    if (y-vspeed/2 &lt;= other.y)
    {
        if (other.vspeed &gt;= 0 &amp;&amp; place_free(x,other.y-9))
        {
            y = other.y-9;
            vspeed = other.vspeed;
        }
        
        onPlatform = true;
        djump = 1;
    }
}
else    //flipped
{
    if (y-vspeed/2 &gt;= other.y+other.sprite_height-1)
    {
        if (other.yspeed &lt;= 0)
        {
            y = other.y+other.sprite_height+8;
            vspeed = other.yspeed;
        }
        
        onPlatform = true;
        djump = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlockFake">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.sfxDelay[1] &lt;= 0)
{
 sfx = audio_play_sound(global.sndTrap,0,false);
 audio_sound_gain(sfx,0.5,0);
 global.sfxDelay[1] = 5;
}
scrObjectDestroy(other);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!place_free(x+hspeed,y))
{
    if (global.grav == 1)   //normal
    {
        if(hspeed &lt;= 0){move_contact_solid(180,abs(hspeed));}
        if(hspeed &gt; 0){move_contact_solid(0,abs(hspeed));}
    }
    else    //flipped
    {
        if(hspeed &lt; 0){move_contact_solid(180,abs(hspeed));}
        if(hspeed &gt;= 0){move_contact_solid(0,abs(hspeed));}
    }
    hspeed = 0;
}
 
if (!place_free(x,y+vspeed))
{
    if (global.grav == 1)   //normal
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed)); Upp = false;}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));djump=1;}
        if(global.phaseSave)
        {
            scrSaveGame(true);
            global.phaseSave = false;
        }
    }
    else    //flipped
    {
        if(vspeed &lt;= 0){move_contact_solid(90,abs(vspeed));djump=1;}
        if(vspeed &gt; 0){move_contact_solid(270,abs(vspeed));}
    }
    vspeed = 0;
}

if (!place_free(x+hspeed,y+vspeed)) {hspeed = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(room)
{
    case rStage3Diverse: 
    case rBoss3Avoid1:
    case rBoss3Avoid4:
        maxSpeed = 4;
        break;
    default: 
        if(global.grav == -1)
            scrFlipGrav(true); 
        maxSpeed = 3;
}

switch(room)
{
 case rBoss5Phase2:
      if(global.phaseSave)
      {
       vspeed = -maxVspeed;
       djump = true;
      }
      break;
}

switch(room)
{
    case rStage6DotKid:
        global.skin = 1; 
        spriteIdle = sprDotkid;
        spriteJump = sprDotkid;
        spriteFall = sprDotkid;
        spriteRunning = sprDotkid;
        spriteSliding = sprDotkid;
        spriteMask = sprDotkid;
        spriteMaskFlipped = sprDotkid;
        instance_create(x,y,objDotkidCircle);
        scrSetPlayerMask();
        break;
    case rBoss7Phase4:
        global.skin = 2;
        spriteIdle = sprPlayerBldle;
        spriteJump = sprPlayerBJump;
        spriteFall = sprPlayerBFall;
        spriteRunning = sprPlayerBRunning;
        break;
    default:
        global.skin = 0; 
        spriteIdle = sprPlayerIdle;
        spriteJump = sprPlayerJump;
        spriteFall = sprPlayerFall;
        spriteRunning = sprPlayerRunning;
        spriteSliding = sprPlayerSliding;
        spriteMask = sprPlayerMask;
        spriteMaskFlipped = sprPlayerMaskFlip;
        scrSetPlayerMask();
        break;
}
if(global.infJump)
{
 infJump = true;
}
else
{
 infJump = false;
}

switch(room)
{
 case rExtraStageFinalDeadRoom:
  clockControl = true;
  break;
 default:
  clockControl = false;
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);

if(room == rBoss6Phase2)
 instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the player

var drawX = x;
var drawY = y;

if (global.grav == -1)      //need to draw the player a pixel off in the y-axis when flipped for some reason
    drawY += 1;
switch(room)
{
    case rStage6Popularity:
        if bbox_right&gt;room_width
        {
            var oldx=x;
            draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
            x=x-room_width;
            draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
            x=oldx;
        } 
        else if bbox_left&lt;0
        {
            var oldx=x; 
            draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
            x=room_width+x; 
            draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
            x=oldx;
        }
        else draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
        break;
    default:
        draw_sprite_ext(sprite_index,image_index,x,drawY,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);        
}

if(infJump)
{
 if(counter &lt;= 50)
  infJumpAlpha += 0.02;
 if(counter &gt; 50 &amp;&amp; counter &lt;= 100)
  infJumpAlpha -= 0.02;
 
 if(counter &gt; 100)
 {
  infJump = false;
  counter = 0;
 }
  
 counter++;
 draw_set_halign(fa_center);
 draw_set_font(fDefault12);
 draw_set_colour(c_white);
 draw_text_ext_colour(x,y-40,"Infinite jump",0,300,c_white,c_white,c_white,c_white,infJumpAlpha);
}
if(clockControl)
{
 if(counter &lt;= 50)
  clockControlAlpha += 0.02;
 if(counter &gt; 100 &amp;&amp; counter &lt;= 150)
  clockControlAlpha -= 0.02;
 
 if(counter &gt; 150)
 {
  clockControl = false;
  counter = 0;
 }
  
 counter++;
 draw_set_halign(fa_center);
 draw_set_font(fDefault12);
 draw_set_colour(c_white);
 draw_text_ext_colour(x,y-40,"Control: up down shoot",0,300,c_white,c_white,c_white,c_white,clockControlAlpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_stop_all();
//game_load("savestate");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//game_save("savestate");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scrSaveGame(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
