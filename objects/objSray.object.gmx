<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSray</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>go = false;
i = -555;
t = 0;
realT = 0;
image_speed = 0;
movements = ds_list_create();
event_user(1); //generate movements
currentMovement = 0;
responseMovement = 0;
cameraSelfie = false;
nextCameraSelfie = false;
cameraDelay = 10;
auto = false;
practice = false;
show = false;
party = 0;
partyBlocksI = 0;
for(var temp = 0; temp &lt; 25; temp++)
{
 partyBlocksAngle[temp] = random(360);
 partyBlocksImage[temp] = irandom(11);
}
dead = false;
deadI = -1;
finalMovement = false;
tile_layer_delete(1000000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = true;
deadI = i;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timeline
if(!go) exit;
if(!instance_exists(objPlayer)) exit;

if(i == -520)
{
 image_speed = 0.5;
 dialog = instance_create(x+50,y-30,objSrayDialog);
 dialog.text = "Have you come to get the energy?!";
 dialog.snap = -1;
}
if(i == -390)
{
 cameraSelfie = false;
 dialog = instance_create(objPlayer.x-50,objPlayer.y-50,objSrayDialog);
 dialog.text = "Well...yeah";
 dialog.snap = 1;
}
if(i == -260)
{
 cameraSelfie = true;
 dialog = instance_create(x+50,y-30,objSrayDialog);
 dialog.text = "Then accept my challenge!";
 dialog.snap = -1;
}
if(i == -130)
{
 cameraSelfie = false;
 dialog = instance_create(objPlayer.x-50,objPlayer.y-50,objSrayDialog);
 dialog.text = "Okay let's do it!";
 dialog.snap = 1;
}
if(i == -10)
{
 cameraSelfie = true;
}

var time4 = 533;
var time2 = 266;
var time1 = 133;

var time1_16 = 8;
var time1_8 = 16;
var time1_4 = 33;
var time1_2 = 66;

if(i &gt;= 0 &amp;&amp; i &lt; time4 * 15) 
{
    if(i % time1 &lt;= time1_2) 
    {
        cameraSelfie = true
    } 
    else 
    {
        cameraSelfie = false
    }
}

if(i == 0)   { nextCameraSelfie = true; event_user(3); image_speed = 0; }
if(i == time1) { nextCameraSelfie = true; event_user(3); }
if(i == time2) { nextCameraSelfie = true; event_user(3); }
if(i == time1 + time2) { nextCameraSelfie = true; event_user(3); }
//next group
var gs = time4
if(i == gs) { event_user(3); party = 1;}
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//UP, UP
gs = time4 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_4) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 2 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { nextCameraSelfie = true; event_user(3); }
//UP, UP UP UP
gs = time4 * 2 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 3
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 3 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 3 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 3 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//UP UP, UP
gs = time4 * 4
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 4 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 4 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 4 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 5
if(i == gs) { party = 0; nextCameraSelfie = true; event_user(3); }
if(i == gs + time1) { nextCameraSelfie = true; event_user(3); }
if(i == gs + time2) { nextCameraSelfie = true; event_user(3); }
if(i == gs + time2 + time1) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 6
if(i == gs) { nextCameraSelfie = true; event_user(3);
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "Your moves are good...";
                dialog.snap = -1; }
if(i == gs + time1) { nextCameraSelfie = true; event_user(3); 
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "I know why you're here..."; 
                dialog.snap = -1; }
if(i == gs + time2) { nextCameraSelfie = true; event_user(3); 
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "But...";
                dialog.snap = -1; }
if(i == gs + time2 + time1) { nextCameraSelfie = true; event_user(3); 
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "I'll never let that happen!";
                dialog.snap = -1; }
//LEFT RIGHT, LEFT RIGHT, LEFT
gs = time4 * 7
if(i == gs) { event_user(3); party = 1; }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 7 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 7 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 7 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 8
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 8 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 8 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 8 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//Up, Up Down, Down
gs = time4 * 9
if(i == gs) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 9 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 9 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 9 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//Up Down Left Right
gs = time4 * 10
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 10 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 10 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 10 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 11
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 11 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 11 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 11 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//Up Down Left, Up Down Right
gs = time4 * 12
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 12 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 12 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 12 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 13
if(i == gs) { party = 2; event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 13 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 13 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 13 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 14
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 14 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 14 + time2
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { nextCameraSelfie = true; event_user(3); }
//next group
gs = time4 * 14 + time2 + time1
if(i == gs) { event_user(3); }
if(i == gs + time1_16) { event_user(3); }
if(i == gs + time1_8) { event_user(3); }
if(i == gs + time1_8 + time1_16) { event_user(3); }
if(i == gs + time1_4) { event_user(3); }
if(i == gs + time1_4 + time1_16) { event_user(3); }
if(i == gs + time1_4 + time1_8) { event_user(3); }
if(i == gs + time1_4 + time1_8 + time1_16) { finalMovement = true; nextCameraSelfie = true; event_user(3); }

if(dead &amp;&amp; i == (deadI+1))
{
 party = 0;
 with(objBlock)
 {
  if(depth == 101)
   instance_destroy();
 }
 image_speed = 0.5;
}
if(dead &amp;&amp; i &gt; (deadI+1) &amp;&amp; i &lt; (deadI + 200) &amp;&amp; i % 10 == 0)
{
    if(global.sfxDelay[0] &lt;= 0)
    {
     var sfx = audio_play_sound(global.sndContraExplosion,0,0);
     audio_sound_gain(sfx,0.5,0);
     global.sfxDelay[0] = 4;
    }
    explosion = instance_create(x+irandom_range(-32,32),y+irandom_range(0,100),objExplosionB);
    explosion.image_xscale = 0.2;
    explosion.image_yscale = 0.2;
}
if(dead &amp;&amp; i == (deadI + 205))
{
    if(global.sfxDelay[0] &lt;= 0)
    {
     audio_play_sound(global.sndContraExplosion,0,0);
     global.sfxDelay[0] = 4;
    }
    explosion = instance_create(x,y+61,objExplosionB);
    explosion.image_xscale = 1;
    explosion.image_yscale = 1;
    if(!global.energy[95])
    {
      energy = instance_create(192,208,objEnergy);
      energy.energyID = 95;
      energy.direction = 60;
      energy.speed = 10;
      energy.friction = 0.2;
      energy.alarm[0] = 20;
      energy.active = true;
    }
    global.extraBossCleared[1] = 1;
    warp = instance_create(x,y+61,objWarp);
    warp.roomTo = rExtraStageMaze;
    warp.autosave = true;    
    image_alpha = 0;
    scrStopMusic();
    if(practice)
    {
     scrKillPlayer();
    }
}
if(dead &amp;&amp; i == (deadI + 225))
{
 view_object[0] = objPlayer;
}

i+=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player response
if(!instance_exists(objPlayer)) exit;

firstResponse = noone;
firstResponseN = ds_list_size(movements);
firstResponseMove = -1;
var minimalTimer = 999;
with(objSrayMovementTimer)
{
    if(N &lt; other.firstResponseN &amp;&amp; alarm[0] &lt; minimalTimer)
    {
        other.firstResponse = id;
        other.firstResponseMove = move;
        minimalTimer = alarm[0];
    }
}
if(firstResponseMove != -1)
{
    if(auto)
    {
     with(firstResponse)
     {
       event_user(0);
     }
     exit;
    }
    
    if(scrButtonCheckPressed(global.leftButton))
    {
     if(firstResponseMove == 0)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 0;
      event_user(2);
     }
    }
    if(scrButtonCheckPressed(global.upButton))
    {
     if(firstResponseMove == 1)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else 
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 1;
      event_user(2);
     }
    }
    if(scrButtonCheckPressed(global.rightButton))
    {
     if(firstResponseMove == 2)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 2;
      event_user(2);
     }
    }
    if(scrButtonCheckPressed(global.downButton))
    {
     if(firstResponseMove == 3)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else 
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 3;
      event_user(2);
     }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera movement
if(cameraSelfie)
{
 if(view_xview[0] &gt; 0)
 {
  view_xview[0] -= 50;
 }
}
else
{
 if(view_xview[0] &lt; 250)
 {
  view_xview[0] += 50;
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///music sync
if( instance_exists(objPlayer) ) {
    t = i + 555;
    scrAdvanceT(global.currentMusic);
} else {
    scrStopMusic();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intro skip
if(instance_exists(objPlayer) &amp;&amp; scrButtonCheckPressed(global.skipButton))
{
 if(i &lt; 0)
 {
  i = 0;
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///practice
/*if(instance_exists(objPlayer) &amp;&amp; keyboard_check_pressed(ord('1')))
{
 practice = true;
 i = 533 * 7;
 currentMovement = 71;
 responseMovement = 71;
 scrObjectDestroy(objSrayDialog);
 scrObjectDestroy(objGamelist);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///next movement

movement = instance_create(x,y-50,objSrayMovement);
movement.move = movements[| currentMovement];
movement.N = currentMovement;
movement.nextCameraSelfie = nextCameraSelfie;
movement.finalMovement = finalMovement;
currentMovement++; 
nextCameraSelfie = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over
scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movements generation

//Down, Up, Left, Right
var uniqueMovemenets = scrGenerateUniqueValues(4);

for(var temp = 0; temp &lt; 4; temp++)
{ 
 ds_list_add(movements,uniqueMovemenets[| temp]);
}

//Up Left, Down, Down
uniqueMovemenets = scrGenerateUniqueValues(3);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);

//Up Right, Down Down Down
uniqueMovemenets = scrGenerateUniqueValues(3);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
//Up Left, Down Down
uniqueMovemenets = scrGenerateUniqueValues(3);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
//Up, Up
movement = irandom(3);
for(var temp = 0; temp &lt; 2; temp++)
{ 
 ds_list_add(movements,movement);
}
//Up Down, Up Down
//Down Up, Down Up
//Right Left, Right Left
repeat(3)
{
    uniqueMovemenets = scrGenerateUniqueValues(2);
    repeat(2)
    {
        for(var temp = 0; temp &lt; 2; temp++)
        { 
         ds_list_add(movements,uniqueMovemenets[| temp]);
        }
    }
}
//Up, Up Up Up
movement = irandom(3);
for(var temp = 0; temp &lt; 4; temp++)
{ 
 ds_list_add(movements,movement);
}
//Up Up Left Up
//Down Down Right Down
//Right Right Up Right
//Left Left Down Left
repeat(4)
{
    uniqueMovemenets = scrGenerateUniqueValues(2);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
}

//Up Up, Up
//Down Down, Down
//Left Left, Left
//Right Right, Right
uniqueMovemenets = scrGenerateUniqueValues(4);
var tempMovement = 0;
repeat(4)
{
    for(var temp = 0; temp &lt; 3; temp++)
    { 
     ds_list_add(movements,uniqueMovemenets[| tempMovement]);
    }
    tempMovement++;
}

//Up, Left, Right, Down,
//Up, Down, Left, Right
repeat(2)
{
    uniqueMovemenets = scrGenerateUniqueValues(4);
    
    for(var temp = 0; temp &lt; 4; temp++)
    { 
     ds_list_add(movements,uniqueMovemenets[| temp]);
    }
}
//Left Right, Left Right, Left
//Right Left, Right Left, Right
//Up Down, Up Down, Up
//Down Up, Down Up, Down
repeat(4)
{
 uniqueMovemenets = scrGenerateUniqueValues(2);
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 0]);
  ds_list_add(movements,uniqueMovemenets[| 1]);
 }
 ds_list_add(movements,uniqueMovemenets[| 0]);
}
//Down Right, Down Left, Right
//Up Right, Up Left, Right
repeat(2)
{    
    uniqueMovemenets = scrGenerateUniqueValues(3);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 2]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
}
//Left Up Up Up Right Up Up Up
//Left Down Down Down Right Down Down Down
repeat(2)
{
    uniqueMovemenets = scrGenerateUniqueValues(3);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    repeat(3)
    {
     ds_list_add(movements,uniqueMovemenets[| 1]);
    }
    ds_list_add(movements,uniqueMovemenets[| 2]);
    repeat(3)
    {
     ds_list_add(movements,uniqueMovemenets[| 1]);
    }
}
//Up, Up Down, Down
//Down, Down Up, Up
//Left, Left Right, Right
//Right, Right Left, Left
repeat(4)
{
 uniqueMovemenets = scrGenerateUniqueValues(2);
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 0]);
 }
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 1]);
 }
}
//Up Down Left Right
//Down Up Right Left
//Left Up Right Down
//Down Right Up Left
repeat(4)
{
 uniqueMovemenets = scrGenerateUniqueValues(4);
 for(var temp = 0; temp &lt; 4; temp++)
 { 
  ds_list_add(movements,uniqueMovemenets[| temp]);
 }
}
//Up Down, Down Up Left Right
//Up Up Down Down Left Left Right Right
//Down Up, Up Down Right Left
//Down Down Up Up Right Right Left Left
repeat(2)
{
    uniqueMovemenets = scrGenerateUniqueValues(4);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 2]);
    ds_list_add(movements,uniqueMovemenets[| 3]);
    
    uniqueMovemenets = scrGenerateUniqueValues(4);
    for(var temp = 0; temp &lt; 4; temp++)
    { 
     ds_list_add(movements,uniqueMovemenets[| temp]);
     ds_list_add(movements,uniqueMovemenets[| temp]);
    }
}
//Up Down Left, Up Down Right
uniqueMovemenets = scrGenerateUniqueValues(4);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 3]);
//Up Down Left Left Up Down Right Right
uniqueMovemenets = scrGenerateUniqueValues(4);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 3]);
ds_list_add(movements,uniqueMovemenets[| 3]);
//Up Up, Up Up, Down Down
//Down Down, Down Down, Up Up
repeat(2)
{
 uniqueMovemenets = scrGenerateUniqueValues(2);
 repeat(4)
 {
  ds_list_add(movements,uniqueMovemenets[| 0]);
 }
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 1]);
 }
}
//Up Down Up Down Up Down Up Down
//Left Right Left Right Left Right Left Right
uniqueMovemenets = scrGenerateUniqueValues(4);
var tempMovement = 0;
repeat(2)
{ 
 repeat(4)
 {  
  ds_list_add(movements,uniqueMovemenets[| tempMovement]);
  ds_list_add(movements,uniqueMovemenets[| tempMovement+1]);
 }
 tempMovement+=2;
}
//Up Down Up Down Left Right Left Right
//Right Left Right Left Up Down Up Down
uniqueMovemenets = scrGenerateUniqueValues(4);
var tempMovement = 0;
repeat(2)
{
 repeat(2)
 {  
  ds_list_add(movements,uniqueMovemenets[| tempMovement]);
  ds_list_add(movements,uniqueMovemenets[| tempMovement+1]);
 }
 tempMovement+=2;
}
var tempMovement = 3;
repeat(2)
{
 repeat(2)
 {  
  ds_list_add(movements,uniqueMovemenets[| tempMovement]);
  ds_list_add(movements,uniqueMovemenets[| tempMovement-1]);
 }
 tempMovement-=2;
}
//Up Left Down Right Up Left Down Right
//Up Right Down Left Up Right Down Left
//Up Left Down Right Up Left Down Right
//Up Right Down Left Up Right Down Left
repeat(2)
{
    movement = irandom(3);
    repeat(2)
    { 
     var tempMovement = movement;
     repeat(4)
     {
      ds_list_add(movements,tempMovement);
      tempMovement--;
      if(tempMovement &lt; 0)
       tempMovement = 3;
     }
    }
    movement = irandom(3);
    repeat(2)
    { 
     var tempMovement = movement;
     repeat(4)
     {
      ds_list_add(movements,tempMovement);
      tempMovement++;
      if(tempMovement &gt; 3)
       tempMovement = 0;
     }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start
visible = true;
go = true;
cameraSelfie = true;
scrPlayMusic(global.sndDjSray,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*if(show) draw_set_color(c_orange);
else draw_set_color(c_white);

draw_text(view_xview[0] + 200,view_yview[0] + 100,string(i));*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///party
if(party == 0)
{
 background_index[0] = -1;
 background_index[1] = bgNueGrid;
 background_vspeed[1] = -1.5;
 background_hspeed[1] = -1.5;
 background_alpha[1] = 1;
 for(var temp = 0; temp &lt; 25; temp++)
 {
  draw_sprite(sprBlockBossRush,0,temp*32,576);
 }
 for(var temp = 0; temp &lt; 19; temp++)
 {
  draw_sprite(sprBlockBossRush,0,768,temp*32);
  draw_sprite(sprBlockBossRush,0,0,temp*32);
 }
}
else if(party == 1)
{ 
 depth = 1000000;
 for(var temp = 0; temp &lt; 25; temp++)
 {
  partyBlocksAngle[temp]+=10;
  partyBlocksImage[temp] = irandom(11);
  draw_sprite_ext(sprAllBlocks,partyBlocksImage[temp],temp*32,592,1,1,partyBlocksAngle[temp],c_white,1);
 }
 
 if(partyBlocksI % 10 == 0)
 {
     background_vspeed[1] = -3;
     background_hspeed[1] = -3;
     background_alpha[1] = 0.6;
     background_index[1] = choose(
     bg95HM,bg96HM,bgBettyGrid, bgDoruppiGrid, bgDoruppiGrid2, bgDoruppiGrid3,bgSecret5Grid,
     bgKoalaGrid, bgRukitoGrid, bgCyberGrid, bgLeeheGrid, bgIntroGRID);
     switch(background_index[1])
     {
      case bg95HM: background_index[0] = bg93HM; break;
      case bg96HM: background_index[0] = bg97HM; break;
      case bgBettyGrid: background_index[0] = bgBetty; break;
      case bgKoalaGrid: background_index[0] = bgKoalaBG; break;
      case bgRukitoGrid: background_index[0] = bgRukitoBG; break;
      case bgCyberGrid: background_index[0] = bgCyber; break;
      default: background_index[0] = -1;
     }
 }
 partyBlocksI++;
 depth = 0;
}
else if(party == 2)
{
 depth = 1000000;
 for(var temp = 0; temp &lt; 25; temp++)
 {
  partyBlocksAngle[temp]+=20;
  partyBlocksImage[temp] = irandom(11);
  draw_sprite_ext(sprAllBlocks,partyBlocksImage[temp],temp*32,592,1,1,partyBlocksAngle[temp],c_white,1);
 }
 
 if(partyBlocksI % 5 == 0)
 {
     background_vspeed[1] = -5;
     background_hspeed[1] = -5;
     background_alpha[1] = 0.6;
     background_index[1] = bgBoss7GRID2;
     background_index[0] = -1;     
     background_colour[0] = make_colour_hsv(irandom(255),60,255);
 }
 partyBlocksI++;
 depth = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
