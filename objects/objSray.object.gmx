<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSray</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>go = false;
i = -555;
image_speed = 0;
movements = ds_list_create();
event_user(1); //generate movements
currentMovement = 0;
responseMovement = 0;
cameraSelfie = false;
nextCameraSelfie = false;
cameraDelay = 10;
auto = false;
show = false;
party = 0;
partyBlocksI = 0;
for(var temp = 0; temp &lt; 25; temp++)
{
 partyBlocksAngle[temp] = random(360);
 partyBlocksImage[temp] = irandom(11);
}
dead = false;
deadI = -1;
finalMovement = false;
tile_layer_delete(1000000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = true;
deadI = i;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timeline
if(!go) exit;
if(!instance_exists(objPlayer)) exit;

if(i == -520)
{
 image_speed = 0.5;
 dialog = instance_create(x+50,y-30,objSrayDialog);
 dialog.text = "Have you come to get the energy?!";
}
if(i == -390)
{
 cameraSelfie = false;
 dialog = instance_create(objPlayer.x-50,objPlayer.y-50,objSrayDialog);
 dialog.text = "Well...yeah";
}
if(i == -260)
{
 cameraSelfie = true;
 dialog = instance_create(x+50,y-30,objSrayDialog);
 dialog.text = "Then accept my challenge!";
}
if(i == -130)
{
 cameraSelfie = false;
 dialog = instance_create(objPlayer.x-50,objPlayer.y-50,objSrayDialog);
 dialog.text = "Okay let's do it!";
}
if(i == -10)
{
 cameraSelfie = true;
}

if(i == 0)   { nextCameraSelfie = true; event_user(3); image_speed = 0; }
if(i == 130) { nextCameraSelfie = true; event_user(3); }
if(i == 268) { nextCameraSelfie = true; event_user(3); }
if(i == 398) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 534) { event_user(3); party = 1;}
if(i == 544) { event_user(3); }
if(i == 568) { event_user(3); }
if(i == 586) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 665) { event_user(3); }
if(i == 675) { event_user(3); }
if(i == 693+5) { event_user(3); }
if(i == 702+5) { event_user(3); }
if(i == 711+5) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 800) { event_user(3); }
if(i == 810) { event_user(3); }
if(i == 834) { event_user(3); }
if(i == 852) { nextCameraSelfie = true; event_user(3); }
//UP, UP
if(i == 931) { event_user(3); }
if(i == 964) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 1063) { event_user(3); }
if(i == 1071) { event_user(3); }
if(i == 1096) { event_user(3); }
if(i == 1104) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 1196) { event_user(3); }
if(i == 1204) { event_user(3); }
if(i == 1230) { event_user(3); }
if(i == 1238) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 1330) { event_user(3); }
if(i == 1338) { event_user(3); }
if(i == 1363) { event_user(3); }
if(i == 1371) { nextCameraSelfie = true; event_user(3); }
//UP, UP UP UP
if(i == 1462) { event_user(3); }
if(i == 1478) { event_user(3); }
if(i == 1486) { event_user(3); }
if(i == 1494) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 1593) { event_user(3); }
if(i == 1609) { event_user(3); }
if(i == 1625) { event_user(3); }
if(i == 1641) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 1726) { event_user(3); }
if(i == 1742) { event_user(3); }
if(i == 1758) { event_user(3); }
if(i == 1774) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 1858) { event_user(3); }
if(i == 1874) { event_user(3); }
if(i == 1890) { event_user(3); }
if(i == 1906) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 1992) { event_user(3); }
if(i == 2008) { event_user(3); }
if(i == 2024) { event_user(3); }
if(i == 2040) { nextCameraSelfie = true; event_user(3); }
//UP UP, UP
if(i == 2123) { event_user(3); }
if(i == 2139) { event_user(3); }
if(i == 2173) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 2257) { event_user(3); }
if(i == 2273) { event_user(3); }
if(i == 2307) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 2391) { event_user(3); }
if(i == 2407) { event_user(3); }
if(i == 2441) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 2520) { event_user(3); }
if(i == 2536) { event_user(3); }
if(i == 2570) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 2654) { event_user(3); party = 0; nextCameraSelfie = true; }
if(i == 2786) { nextCameraSelfie = true; event_user(3); }
if(i == 2914) { nextCameraSelfie = true; event_user(3); }
if(i == 3047) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 3182) { nextCameraSelfie = true; event_user(3);
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "Your moves are good..."; }
if(i == 3313) { nextCameraSelfie = true; event_user(3); 
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "I know why you're here..."; }
if(i == 3447) { nextCameraSelfie = true; event_user(3); 
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "But..."; }
if(i == 3579) { nextCameraSelfie = true; event_user(3); 
                dialog = instance_create(x+50,y-30,objSrayDialog);
                dialog.text = "I'll never let that happen!"; }
//LEFT RIGHT, LEFT RIGHT, LEFT
if(i == 3714) { event_user(3); party = 1; }
if(i == 3722) { event_user(3); }
if(i == 3740) { event_user(3); }
if(i == 3748) { event_user(3); }
if(i == 3762) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 3844) { event_user(3); }
if(i == 3852) { event_user(3); }
if(i == 3870) { event_user(3); }
if(i == 3878) { event_user(3); }
if(i == 3894) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 3977) { event_user(3); }
if(i == 3985) { event_user(3); }
if(i == 4004) { event_user(3); }
if(i == 4012) { event_user(3); }
if(i == 4027) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 4108) { event_user(3); }
if(i == 4116) { event_user(3); }
if(i == 4133) { event_user(3); }
if(i == 4141) { event_user(3); }
if(i == 4158) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 4240) { event_user(3); }
if(i == 4248) { event_user(3); }
if(i == 4265) { event_user(3); }
if(i == 4273) { event_user(3); }
if(i == 4290) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 4372) { event_user(3); }
if(i == 4380) { event_user(3); }
if(i == 4399) { event_user(3); }
if(i == 4407) { event_user(3); }
if(i == 4424) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 4508-5) { event_user(3); }
if(i == 4516-5) { event_user(3); }
if(i == 4524-5) { event_user(3); }
if(i == 4532-5) { event_user(3); }
if(i == 4540-5) { event_user(3); }
if(i == 4548-5) { event_user(3); }
if(i == 4556-5) { event_user(3); }
if(i == 4564-5) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 4641-5) { event_user(3); }
if(i == 4649-5) { event_user(3); }
if(i == 4657-5) { event_user(3); }
if(i == 4665-5) { event_user(3); }
if(i == 4673-5) { event_user(3); }
if(i == 4681-5) { event_user(3); }
if(i == 4689-5) { event_user(3); }
if(i == 4697-5) { nextCameraSelfie = true; event_user(3); }
//Up, Up Down, Down
if(i == 4770) { event_user(3); }
if(i == 4794) { event_user(3); }
if(i == 4804) { event_user(3); }
if(i == 4819) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 4900) { event_user(3); }
if(i == 4924) { event_user(3); }
if(i == 4932) { event_user(3); }
if(i == 4950) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 5033) { event_user(3); }
if(i == 5058) { event_user(3); }
if(i == 5066) { event_user(3); }
if(i == 5082) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 5166) { event_user(3); }
if(i == 5190) { event_user(3); }
if(i == 5198) { event_user(3); }
if(i == 5216) { nextCameraSelfie = true; event_user(3); }
//Up Down Left Right
if(i == 5297) { event_user(3); }
if(i == 5314) { event_user(3); }
if(i == 5331) { event_user(3); }
if(i == 5348) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 5429) { event_user(3); }
if(i == 5446) { event_user(3); }
if(i == 5463) { event_user(3); }
if(i == 5480) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 5567-6) { event_user(3); }
if(i == 5584-6) { event_user(3); }
if(i == 5601-6) { event_user(3); }
if(i == 5618-6) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 5695+4) { event_user(3); }
if(i == 5712+4) { event_user(3); }
if(i == 5729+4) { event_user(3); }
if(i == 5746+4) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 5829) { event_user(3); }
if(i == 5837) { event_user(3); }
if(i == 5858) { event_user(3); }
if(i == 5866) { event_user(3); }
if(i == 5880) { event_user(3); }
if(i == 5888) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 5962) { event_user(3); }
if(i == 5970) { event_user(3); }
if(i == 5978) { event_user(3); }
if(i == 5986) { event_user(3); }
if(i == 5994) { event_user(3); }
if(i == 6002) { event_user(3); }
if(i == 6010) { event_user(3); }
if(i == 6018) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 6094) { event_user(3); }
if(i == 6102) { event_user(3); }
if(i == 6121) { event_user(3); }
if(i == 6129) { event_user(3); }
if(i == 6144) { event_user(3); }
if(i == 6152) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 6228) { event_user(3); }
if(i == 6236) { event_user(3); }
if(i == 6244) { event_user(3); }
if(i == 6252) { event_user(3); }
if(i == 6260) { event_user(3); }
if(i == 6268) { event_user(3); }
if(i == 6276) { event_user(3); }
if(i == 6284) { nextCameraSelfie = true; event_user(3); }
//Up Down Left, Up Down Right
if(i == 6359) { event_user(3); }
if(i == 6367) { event_user(3); }
if(i == 6375) { event_user(3); }
if(i == 6394) { event_user(3); }
if(i == 6402) { event_user(3); }
if(i == 6410) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 6492) { event_user(3); }
if(i == 6500) { event_user(3); }
if(i == 6508) { event_user(3); }
if(i == 6516) { event_user(3); }
if(i == 6524) { event_user(3); }
if(i == 6532) { event_user(3); }
if(i == 6540) { event_user(3); }
if(i == 6548) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 6624) { event_user(3); }
if(i == 6632) { event_user(3); }
if(i == 6650) { event_user(3); }
if(i == 6658) { event_user(3); }
if(i == 6675) { event_user(3); }
if(i == 6683) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 6756) { event_user(3); }
if(i == 6764) { event_user(3); }
if(i == 6783) { event_user(3); }
if(i == 6791) { event_user(3); }
if(i == 6808) { event_user(3); }
if(i == 6816) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 6890) { party = 2; event_user(3); }
if(i == 6898) { event_user(3); }
if(i == 6906) { event_user(3); }
if(i == 6914) { event_user(3); }
if(i == 6922) { event_user(3); }
if(i == 6930) { event_user(3); }
if(i == 6938) { event_user(3); }
if(i == 6946) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 7024) { event_user(3); }
if(i == 7032) { event_user(3); }
if(i == 7040) { event_user(3); }
if(i == 7048) { event_user(3); }
if(i == 7056) { event_user(3); }
if(i == 7064) { event_user(3); }
if(i == 7072) { event_user(3); }
if(i == 7080) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 7153) { event_user(3); }
if(i == 7161) { event_user(3); }
if(i == 7169) { event_user(3); }
if(i == 7177) { event_user(3); }
if(i == 7185) { event_user(3); }
if(i == 7193) { event_user(3); }
if(i == 7201) { event_user(3); }
if(i == 7209) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 7288) { event_user(3); }
if(i == 7296) { event_user(3); }
if(i == 7304) { event_user(3); }
if(i == 7312) { event_user(3); }
if(i == 7320) { event_user(3); }
if(i == 7328) { event_user(3); }
if(i == 7336) { event_user(3); }
if(i == 7344) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 7420) { event_user(3); }
if(i == 7428) { event_user(3); }
if(i == 7436) { event_user(3); }
if(i == 7444) { event_user(3); }
if(i == 7452) { event_user(3); }
if(i == 7460) { event_user(3); }
if(i == 7468) { event_user(3); }
if(i == 7476) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 7552) { event_user(3); }
if(i == 7560) { event_user(3); }
if(i == 7568) { event_user(3); }
if(i == 7576) { event_user(3); }
if(i == 7584) { event_user(3); }
if(i == 7592) { event_user(3); }
if(i == 7600) { event_user(3); }
if(i == 7608) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 7684) { event_user(3); }
if(i == 7692) { event_user(3); }
if(i == 7700) { event_user(3); }
if(i == 7708) { event_user(3); }
if(i == 7716) { event_user(3); }
if(i == 7724) { event_user(3); }
if(i == 7732) { event_user(3); }
if(i == 7740) { nextCameraSelfie = true; event_user(3); }
//next group
if(i == 7814) { event_user(3); }
if(i == 7822) { event_user(3); }
if(i == 7830) { event_user(3); }
if(i == 7838) { event_user(3); }
if(i == 7846) { event_user(3); }
if(i == 7854) { event_user(3); }
if(i == 7862) { event_user(3); }
if(i == 7870) { finalMovement = true; nextCameraSelfie = true; event_user(3); }

if(dead &amp;&amp; i == (deadI+1))
{
 party = 0;
 with(objBlock)
 {
  if(depth == 101)
   instance_destroy();
 }
 image_speed = 0.5;
}
if(dead &amp;&amp; i &gt; (deadI+1) &amp;&amp; i &lt; (deadI + 200) &amp;&amp; i % 10 == 0)
{
    if(global.sfxDelay[0] &lt;= 0)
    {
     var sfx = audio_play_sound(global.sndContraExplosion,0,0);
     audio_sound_gain(sfx,0.5,0);
     global.sfxDelay[0] = 4;
    }
    explosion = instance_create(x+irandom_range(-32,32),y+irandom_range(0,100),objExplosionB);
    explosion.image_xscale = 0.2;
    explosion.image_yscale = 0.2;
}
if(dead &amp;&amp; i == (deadI + 205))
{
    if(global.sfxDelay[0] &lt;= 0)
    {
     audio_play_sound(global.sndContraExplosion,0,0);
     global.sfxDelay[0] = 4;
    }
    explosion = instance_create(x,y+61,objExplosionB);
    explosion.image_xscale = 1;
    explosion.image_yscale = 1;
    if(!global.energy[95])
    {
      energy = instance_create(192,208,objEnergy);
      energy.energyID = 95;
      energy.direction = 60;
      energy.speed = 10;
      energy.friction = 0.2;
      energy.alarm[0] = 20;
      energy.active = true;
    }
    global.extraBossCleared[1] = 1;
    warp = instance_create(x,y+61,objWarp);
    warp.roomTo = rExtraStageMaze;
    warp.autosave = true;    
    image_alpha = 0;
    scrStopMusic();
}
if(dead &amp;&amp; i == (deadI + 225))
{
 view_object[0] = objPlayer;
}

i+=1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player response
if(!instance_exists(objPlayer)) exit;

firstResponse = noone;
firstResponseN = ds_list_size(movements);
firstResponseMove = -1;
with(objSrayMovementTimer)
{
 if(N &lt; other.firstResponseN)
 {
  other.firstResponse = id;
  other.firstResponseMove = move;
 }
}
if(firstResponseMove != -1)
{
    if(auto)
    {
     with(firstResponse)
     {
       event_user(0);
     }
     exit;
    }
    
    if(scrButtonCheckPressed(global.leftButton))
    {
     if(firstResponseMove == 0)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 0;
      event_user(2);
     }
    }
    if(scrButtonCheckPressed(global.upButton))
    {
     if(firstResponseMove == 1)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else 
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 1;
      event_user(2);
     }
    }
    if(scrButtonCheckPressed(global.rightButton))
    {
     if(firstResponseMove == 2)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 2;
      event_user(2);
     }
    }
    if(scrButtonCheckPressed(global.downButton))
    {
     if(firstResponseMove == 3)
     {
         with(firstResponse)
         {
           event_user(0);
         }
     }
     else 
     {
      playerMovement = instance_create(objPlayer.x,objPlayer.y - 40,objSrayPlayerMovement);
      playerMovement.move = 3;
      event_user(2);
     }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///camera movement
//cameraSelfie = true; //DEBUG
if(false)
{
 cameraDelay--;
}
else
{
    if(cameraSelfie)
    {
     if(view_xview[0] &gt; 0)
     {
      view_xview[0] -= 25;
     }
    }
    else
    {
     if(view_xview[0] &lt; 250)
     {
      view_xview[0] += 25;
     }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///next movement

movement = instance_create(x,y-50,objSrayMovement);
movement.move = movements[| currentMovement];
movement.N = currentMovement;
movement.nextCameraSelfie = nextCameraSelfie;
movement.finalMovement = finalMovement;
currentMovement++; 
nextCameraSelfie = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over
scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movements generation

//Down, Up, Left, Right
var uniqueMovemenets = scrGenerateUniqueValues(4);

for(var temp = 0; temp &lt; 4; temp++)
{ 
 ds_list_add(movements,uniqueMovemenets[| temp]);
}

//Up Left, Down, Down
uniqueMovemenets = scrGenerateUniqueValues(3);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);

//Up Right, Down Down Down
uniqueMovemenets = scrGenerateUniqueValues(3);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
//Up Left, Down Down
uniqueMovemenets = scrGenerateUniqueValues(3);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
//Up, Up
movement = irandom(3);
for(var temp = 0; temp &lt; 2; temp++)
{ 
 ds_list_add(movements,movement);
}
//Up Down, Up Down
//Down Up, Down Up
//Right Left, Right Left
repeat(3)
{
    uniqueMovemenets = scrGenerateUniqueValues(2);
    repeat(2)
    {
        for(var temp = 0; temp &lt; 2; temp++)
        { 
         ds_list_add(movements,uniqueMovemenets[| temp]);
        }
    }
}
//Up, Up Up Up
movement = irandom(3);
for(var temp = 0; temp &lt; 4; temp++)
{ 
 ds_list_add(movements,movement);
}
//Up Up Left Up
//Down Down Right Down
//Right Right Up Right
//Left Left Down Left
repeat(4)
{
    uniqueMovemenets = scrGenerateUniqueValues(2);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
}

//Up Up, Up
//Down Down, Down
//Left Left, Left
//Right Right, Right
uniqueMovemenets = scrGenerateUniqueValues(4);
var tempMovement = 0;
repeat(4)
{
    for(var temp = 0; temp &lt; 3; temp++)
    { 
     ds_list_add(movements,uniqueMovemenets[| tempMovement]);
    }
    tempMovement++;
}

//Up, Left, Right, Down,
//Up, Down, Left, Right
repeat(2)
{
    uniqueMovemenets = scrGenerateUniqueValues(4);
    
    for(var temp = 0; temp &lt; 4; temp++)
    { 
     ds_list_add(movements,uniqueMovemenets[| temp]);
    }
}
//Left Right, Left Right, Left
//Right Left, Right Left, Right
//Up Down, Up Down, Up
//Down Up, Down Up, Down
repeat(4)
{
 uniqueMovemenets = scrGenerateUniqueValues(2);
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 0]);
  ds_list_add(movements,uniqueMovemenets[| 1]);
 }
 ds_list_add(movements,uniqueMovemenets[| 0]);
}
//Down Right, Down Left, Right
//Up Right, Up Left, Right
repeat(2)
{    
    uniqueMovemenets = scrGenerateUniqueValues(3);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 2]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
}
//Left Up Up Up Right Up Up Up
//Left Down Down Down Right Down Down Down
repeat(2)
{
    uniqueMovemenets = scrGenerateUniqueValues(3);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    repeat(3)
    {
     ds_list_add(movements,uniqueMovemenets[| 1]);
    }
    ds_list_add(movements,uniqueMovemenets[| 2]);
    repeat(3)
    {
     ds_list_add(movements,uniqueMovemenets[| 1]);
    }
}
//Up, Up Down, Down
//Down, Down Up, Up
//Left, Left Right, Right
//Right, Right Left, Left
repeat(4)
{
 uniqueMovemenets = scrGenerateUniqueValues(2);
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 0]);
 }
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 1]);
 }
}
//Up Down Left Right
//Down Up Right Left
//Left Up Right Down
//Down Right Up Left
repeat(4)
{
 uniqueMovemenets = scrGenerateUniqueValues(4);
 for(var temp = 0; temp &lt; 4; temp++)
 { 
  ds_list_add(movements,uniqueMovemenets[| temp]);
 }
}
//Up Down, Down Up Left Right
//Up Up Down Down Left Left Right Right
//Down Up, Up Down Right Left
//Down Down Up Up Right Right Left Left
repeat(2)
{
    uniqueMovemenets = scrGenerateUniqueValues(4);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 1]);
    ds_list_add(movements,uniqueMovemenets[| 0]);
    ds_list_add(movements,uniqueMovemenets[| 2]);
    ds_list_add(movements,uniqueMovemenets[| 3]);
    
    uniqueMovemenets = scrGenerateUniqueValues(4);
    for(var temp = 0; temp &lt; 4; temp++)
    { 
     ds_list_add(movements,uniqueMovemenets[| temp]);
     ds_list_add(movements,uniqueMovemenets[| temp]);
    }
}
//Up Down Left, Up Down Right
uniqueMovemenets = scrGenerateUniqueValues(4);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 3]);
//Up Down Left Left Up Down Right Right
uniqueMovemenets = scrGenerateUniqueValues(4);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 2]);
ds_list_add(movements,uniqueMovemenets[| 0]);
ds_list_add(movements,uniqueMovemenets[| 1]);
ds_list_add(movements,uniqueMovemenets[| 3]);
ds_list_add(movements,uniqueMovemenets[| 3]);
//Up Up, Up Up, Down Down
//Down Down, Down Down, Up Up
repeat(2)
{
 uniqueMovemenets = scrGenerateUniqueValues(2);
 repeat(4)
 {
  ds_list_add(movements,uniqueMovemenets[| 0]);
 }
 repeat(2)
 {
  ds_list_add(movements,uniqueMovemenets[| 1]);
 }
}
//Up Down Up Down Up Down Up Down
//Left Right Left Right Left Right Left Right
uniqueMovemenets = scrGenerateUniqueValues(4);
var tempMovement = 0;
repeat(2)
{ 
 repeat(4)
 {  
  ds_list_add(movements,uniqueMovemenets[| tempMovement]);
  ds_list_add(movements,uniqueMovemenets[| tempMovement+1]);
 }
 tempMovement+=2;
}
//Up Down Up Down Left Right Left Right
//Right Left Right Left Up Down Up Down
uniqueMovemenets = scrGenerateUniqueValues(4);
var tempMovement = 0;
repeat(2)
{
 repeat(2)
 {  
  ds_list_add(movements,uniqueMovemenets[| tempMovement]);
  ds_list_add(movements,uniqueMovemenets[| tempMovement+1]);
 }
 tempMovement+=2;
}
var tempMovement = 3;
repeat(2)
{
 repeat(2)
 {  
  ds_list_add(movements,uniqueMovemenets[| tempMovement]);
  ds_list_add(movements,uniqueMovemenets[| tempMovement-1]);
 }
 tempMovement-=2;
}
//Up Left Down Right Up Left Down Right
//Up Right Down Left Up Right Down Left
//Up Left Down Right Up Left Down Right
//Up Right Down Left Up Right Down Left
repeat(2)
{
    movement = irandom(3);
    repeat(2)
    { 
     var tempMovement = movement;
     repeat(4)
     {
      ds_list_add(movements,tempMovement);
      tempMovement--;
      if(tempMovement &lt; 0)
       tempMovement = 3;
     }
    }
    movement = irandom(3);
    repeat(2)
    { 
     var tempMovement = movement;
     repeat(4)
     {
      ds_list_add(movements,tempMovement);
      tempMovement++;
      if(tempMovement &gt; 3)
       tempMovement = 0;
     }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start
visible = true;
go = true;
cameraSelfie = true;
scrPlayMusic(global.sndDjSray,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*if(show) draw_set_color(c_orange);
else draw_set_color(c_white);

draw_text(view_xview[0] + 200,view_yview[0] + 100,string(i));*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///party
if(party == 0)
{
 background_index[0] = -1;
 background_index[1] = bgNueGrid;
 background_vspeed[1] = -1.5;
 background_hspeed[1] = -1.5;
 background_alpha[1] = 1;
 for(var temp = 0; temp &lt; 25; temp++)
 {
  draw_sprite(sprBlockBossRush,0,temp*32,576);
 }
 for(var temp = 0; temp &lt; 19; temp++)
 {
  draw_sprite(sprBlockBossRush,0,768,temp*32);
  draw_sprite(sprBlockBossRush,0,0,temp*32);
 }
}
else if(party == 1)
{ 
 depth = 1000000;
 for(var temp = 0; temp &lt; 25; temp++)
 {
  partyBlocksAngle[temp]+=10;
  partyBlocksImage[temp] = irandom(11);
  draw_sprite_ext(sprAllBlocks,partyBlocksImage[temp],temp*32,592,1,1,partyBlocksAngle[temp],c_white,1);
 }
 
 if(partyBlocksI % 10 == 0)
 {
     background_vspeed[1] = -3;
     background_hspeed[1] = -3;
     background_alpha[1] = 0.6;
     background_index[1] = choose(
     bg95HM,bg96HM,bgBettyGrid, bgDoruppiGrid, bgDoruppiGrid2, bgDoruppiGrid3,bgSecret5Grid,
     bgKoalaGrid, bgRukitoGrid, bgCyberGrid, bgLeeheGrid, bgIntroGRID);
     switch(background_index[1])
     {
      case bg95HM: background_index[0] = bg93HM; break;
      case bg96HM: background_index[0] = bg97HM; break;
      case bgBettyGrid: background_index[0] = bgBetty; break;
      case bgKoalaGrid: background_index[0] = bgKoalaBG; break;
      case bgRukitoGrid: background_index[0] = bgRukitoBG; break;
      case bgCyberGrid: background_index[0] = bgCyber; break;
      default: background_index[0] = -1;
     }
 }
 partyBlocksI++;
 depth = 0;
}
else if(party == 2)
{
 depth = 1000000;
 for(var temp = 0; temp &lt; 25; temp++)
 {
  partyBlocksAngle[temp]+=20;
  partyBlocksImage[temp] = irandom(11);
  draw_sprite_ext(sprAllBlocks,partyBlocksImage[temp],temp*32,592,1,1,partyBlocksAngle[temp],c_white,1);
 }
 
 if(partyBlocksI % 5 == 0)
 {
     background_vspeed[1] = -5;
     background_hspeed[1] = -5;
     background_alpha[1] = 0.6;
     background_index[1] = bgBoss7GRID2;
     background_index[0] = -1;     
     background_colour[0] = make_colour_hsv(irandom(255),60,255);
 }
 partyBlocksI++;
 depth = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
