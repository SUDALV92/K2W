<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprComputer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mainDisplayWidth = 23;
mainText = "";
mainTextLength = string_length(mainText);
mainTextStartPos = 1;
mainTextScrollDelay = 50;

mainText2 = "";
mainText2Length = string_length(mainText2);
mainText2StartPos = 1;
mainText2ScrollDelay = 50;

mainText3 = "";
mainText3Length = string_length(mainText3);
mainText3StartPos = 1;
mainText3ScrollDelay = 50;

mainTextScrollSpd = 8;
alarm[0] = mainTextScrollSpd;
alarm[1] = 50;

binData = "";
repeat(50)
{
 binData += string(choose(0,1));
}
binI=0;
shutdown = false;
t = 0;

energy = 0;
event_user(0);

upDelay = 0; //actually down delay
downDelay = 0; //actually up delay Kappa
upDelayDecreaser = 0;
downDelayDecreaser = 0;

totalEnergy = 0;
for(var temp = 0; temp &lt; 100; temp++)
{
  if(global.energy[temp])
   totalEnergy++;
}

for(var i = 0; i &lt; 23; i++)
{
 if(i == 0)
  loading[i] = "[";
 else if(i == 22)
  loading[i] = "]";
 else
  loading[i] = "_";
}
loadingI = 1;
interrupted = false;
go = false;
isWarping = false;
warpI = 0;
drawText = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mainText3 == "")
{
 mainText3 = "ISSUE RESOLVED";
}
else
{
 mainText3 = "";
}
alarm[1] = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mainTextScrollDelay &gt; 0)
{
    mainTextScrollDelay--;
}
else
{
    mainTextStartPos += 1;
    if(mainTextStartPos &gt; mainTextLength)
     mainTextStartPos = 1;
}

if(mainText2ScrollDelay &gt; 0)
{
 mainText2ScrollDelay--;
}
else
{
 mainText2StartPos += 1;
 if(mainText2StartPos &gt; mainText2Length)
  mainText2StartPos = 1;
}
 
if(mainText3ScrollDelay &gt; 0)
{
 mainText3ScrollDelay--;
}
else
{
 mainText3StartPos += 1;
 if(mainText3StartPos &gt; mainText3Length)
  mainText3StartPos = 1;
}
 
alarm[0] = mainTextScrollSpd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Warping
if(isWarping)
{
 if(warpI &lt; 50)
 {
  image_alpha -= 0.02;
  image_xscale = random_range(0.95,1.05);
  image_yscale = random_range(0.95,1.05);
  x = xstart + irandom_range(-2,2);
  y = ystart + irandom_range(-2,2);
 }
 else
 {
  instance_destroy();
 }
 warpI++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>temp = "SHUTDOWN SEQUENCE";
if(mainText != temp)
{
 mainText = temp;
 mainTextLength = string_length(mainText);
 mainTextScrollDelay = 10;
 mainTextStartPos = 1;
}

if(!go) exit;

if(binI mod 10 == 0)
{  
  if(!interrupted)
  {
   binData += string(choose(0,1));
  }
  else
  {
   binData += "0";
  }
}
if(t mod 20 == 0 &amp;&amp; !interrupted)
{
  if(loadingI == 21)
  {
   interrupted = true;
   alarm[1] = 0;
   mainText3 = "";
  }
   
  loading[loadingI] = "|";
  loadingI++;
  mainText2 = "";
  for(var i = 0; i &lt; 23; i++)
  {
   mainText2 += loading[i];
  }
}

binI++;
t++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(!drawText) exit;

draw_set_font(fJoystix8);
draw_set_valign(fa_top);
draw_set_halign(fa_center);
draw_set_color(c_green);
if(mainTextLength &gt; mainDisplayWidth)
{
    if(string_copy(mainText,mainTextLength-4,5) != "     ")
    {
     mainNewText = mainText + "     ";
     mainTextLength = string_length(mainNewText);
    }
    currentString = string_copy(mainNewText,mainTextStartPos,mainDisplayWidth);
    
    var notFilled = true;
    while(notFilled)
    {
        currentLength = string_length(currentString);
        if(currentLength &lt; mainDisplayWidth)
        {
         currentString += string_copy(mainNewText,1,mainDisplayWidth - currentLength);
        }
        else
        {
         notFilled = false;
        }
    }    
}
else
{
    currentString = mainText;
}
draw_text(x+118,y+8,currentString);

//main text 2
if(mainText2Length &gt; mainDisplayWidth)
{
    if(string_copy(mainText2,mainText2Length-4,5) != "     ")
    {
     mainNewText2 = mainText2 + "     ";
     mainText2Length = string_length(mainNewText2);
    }
    currentString = string_copy(mainNewText2,mainText2StartPos,mainDisplayWidth);
    
    var notFilled = true;
    while(notFilled)
    {
        currentLength = string_length(currentString);
        if(currentLength &lt; mainDisplayWidth)
        {
         currentString += string_copy(mainNewText2,1,mainDisplayWidth - currentLength);
        }
        else
        {
         notFilled = false;
        }
    }    
}
else
{
    currentString = mainText2;
}
draw_set_halign(fa_left);
draw_text(x+15,y+24,currentString);

//main text 3
if(mainText3Length &gt; mainDisplayWidth)
{
    if(string_copy(mainText3,mainText3Length-4,5) != "     ")
    {
     mainNewText3 = mainText3 + "     ";
     mainText3Length = string_length(mainNewText3);
    }
    currentString = string_copy(mainNewText3,mainText3StartPos,mainDisplayWidth);
    
    var notFilled = true;
    while(notFilled)
    {
        currentLength = string_length(currentString);
        if(currentLength &lt; mainDisplayWidth)
        {
         currentString += string_copy(mainNewText3,1,mainDisplayWidth - currentLength);
        }
        else
        {
         notFilled = false;
        }
    }    
}
else
{
    currentString = mainText3;
}
draw_set_halign(fa_center);
draw_text(x+118,y+40,currentString);

draw_set_font(fJoystix12);
draw_set_halign(fa_left);
var binLength = string_length(binData);
var row = 5;
for(var temp = binLength-1; temp &gt;= 0; temp-=5)
{
 draw_text(x+165,y+77+(13*row),string_copy(binData,temp-5,5));
 row--;
 if(row &lt; 0)
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
