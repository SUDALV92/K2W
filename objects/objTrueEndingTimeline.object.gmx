<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>t = 0;
fade = SceneFade;
global.extraClear = 1;
global.stageUnlocked[85] = true;
scrSaveGame(true);
bg = -1;
bg_back = -1;
bg_x = 0;
bg_y = 0;
bg_speed = -1.5;
bg_alpha = 1;
endingY = 658;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///audio sync
if( abs( audio_sound_get_track_position(global.currentMusic) * 50 - t ) &gt; 10 ) 
{     
 audio_sound_set_track_position(global.currentMusic, t/50);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///text timeline
if(t == 0)
{
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna Kill The Kamilia 2",c_orange);
 scrTrueEndingAddLine("WARPED",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Creator: SUDALV",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Subcreator: Redire",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Feedback: gogibestyeah",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Sprite helping: KarinaKo",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Game List",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 1",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna Kill The Kamilia",$A956A8);
 scrTrueEndingAddLine("by OyO");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the GGM",$A956A8);
 scrTrueEndingAddLine("by [Aikon]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna enjoy the Game",$A956A8);
 scrTrueEndingAddLine("by betty");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna conquer the blow game",$A956A8);
 scrTrueEndingAddLine("by [Tetorin]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Escape the Mysterious House",$A956A8);
 scrTrueEndingAddLine("by poroniumu");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna get the Yellow Star",$A956A8);
 scrTrueEndingAddLine("by [Surumeika]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Dark Blue",$A956A8);
 scrTrueEndingAddLine("by P");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Experience",$A956A8);
 scrTrueEndingAddLine("by [Marimario]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Be the Fortress Returns",$A956A8);
 scrTrueEndingAddLine("by [Yoyo]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Fangame!",$A956A8);
 scrTrueEndingAddLine("by tijit");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 2",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna conquer the blow game",$A956A8);
 scrTrueEndingAddLine("by [Tetorin]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Graduate From DT",$A956A8);
 scrTrueEndingAddLine("by [Doruppi]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Green Moon",$A956A8);
 scrTrueEndingAddLine("by [Surumeika]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Showdown",$A956A8);
 scrTrueEndingAddLine("by P");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna be the GreeeeN",$A956A8);
 scrTrueEndingAddLine("by P");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Tribute",$A956A8);
 scrTrueEndingAddLine("by shaman666");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Yassan(21)",$A956A8);
 scrTrueEndingAddLine("by [Yassan]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna run the Terminal!",$A956A8);
 scrTrueEndingAddLine("by aqua");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Best Guy",$A956A8);
 scrTrueEndingAddLine("by Gustav");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Guy",$A956A8);
 scrTrueEndingAddLine("by Kayin");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 3",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the 500",$A9A456);
 scrTrueEndingAddLine("by poroniumu");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Uhuhu Spike",$A9A456);
 scrTrueEndingAddLine("by [Tsutashin]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Skyclad",$A9A456);
 scrTrueEndingAddLine("by Dagger");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna CQ",$A9A456);
 scrTrueEndingAddLine("by aqua");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the RUKIMIN!7",$A9A456);
 scrTrueEndingAddLine("by [Rukimin]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Diverse",$A9A456);
 scrTrueEndingAddLine("by [Teiku]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the HeavenTrap2",$A9A456);
 scrTrueEndingAddLine("by [Carnival]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna see the Moon",$A9A456);
 scrTrueEndingAddLine("by aqua");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Be the White Cherry",$A9A456);
 scrTrueEndingAddLine("by [Hone.]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna take the Timemachine",$A9A456);
 scrTrueEndingAddLine("by INFLUKA");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 4",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Galaxy",$865D4D);
 scrTrueEndingAddLine("by Sureiru");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the GB",$6F4639);
 scrTrueEndingAddLine("by [Ashimoto chui keiho hatsurei]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Phantom",$6F4639);
 scrTrueEndingAddLine("by [Doruppi]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Device",$6F4639);
 scrTrueEndingAddLine("by [Teiku]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the HeavenTrap",$6F4639);
 scrTrueEndingAddLine("by [Carnival]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Shiny spark!!",$6F4639);
 scrTrueEndingAddLine("by eden");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Conscience",$6F4639);
 scrTrueEndingAddLine("by PomuRin");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Explorer",$6F4639);
 scrTrueEndingAddLine("by [Hone.]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Be the Competitor",$6F4639);
 scrTrueEndingAddLine("by [Mizutori]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna kill the guy",$6F4639);
 scrTrueEndingAddLine("by TheNewGeezer");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 5",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Color",$33550F);
 scrTrueEndingAddLine("by [Charlie]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna be the Scapegoat",$33550F);
 scrTrueEndingAddLine("by dagger");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Be the Symmetry",$33550F);
 scrTrueEndingAddLine("by [Mizutori]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the rainbow MIKU",$33550F);
 scrTrueEndingAddLine("by [Peru]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Be the Unknown",$33550F);
 scrTrueEndingAddLine("by [Mizutori]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna End the Blood Festival",$33550F);
 scrTrueEndingAddLine("by [Hone.]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Dieary",$33550F);
 scrTrueEndingAddLine("by azure");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the PYF",$33550F);
 scrTrueEndingAddLine("by [Rukito]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Locus",$33550F);
 scrTrueEndingAddLine("by PomuRin");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Boshy",$33550F);
 scrTrueEndingAddLine("by Solgryn");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 6",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the GR",$A39646);
 scrTrueEndingAddLine("by [Rukito]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna go the DotKid!",$A39646);
 scrTrueEndingAddLine("by [Tokoroten]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna break through Seven trials",$A39646);
 scrTrueEndingAddLine("by [Doruppi]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Be the Sadist",$A39646);
 scrTrueEndingAddLine("by [Berry]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Be the Catastrophe",$A39646);
 scrTrueEndingAddLine("by [abi]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Crimson",$72375D);
 scrTrueEndingAddLine("by [Carnival]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Destination",$72375D);
 scrTrueEndingAddLine("by [Carnival]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I Wanna Make It Breaking Out",$72375D);
 scrTrueEndingAddLine("by carua, [Mizutori]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the Popularity",$72375D);
 scrTrueEndingAddLine("by eden, Qup");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna be the LoveTrap",$72375D);
 scrTrueEndingAddLine("by [Nekoron]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("M-Stage",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("I wanna kill the Kamilia 2",$CC7DD7);
 scrTrueEndingAddLine("by INFLUKA");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Extra stage",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Bottomless Abyss",$3B3300);
 scrTrueEndingAddLine("by Lohee");
 scrTrueEndingAddLine("remake by Redire",$3E5FB3);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Music",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Intro",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("MAN WITH A MISSION",c_orange);
 scrTrueEndingAddLine("Database feat. TAKUMA (10-FEET)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Title",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("AKI, H. Kobayashi, M. Yamane",c_orange);
 scrTrueEndingAddLine("Charshoe X");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 1",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Yann van der Cruyssen",c_orange);
 scrTrueEndingAddLine("Cave Story Theme Song");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Volcano boss",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Tomoya Ohtani",c_orange);
 scrTrueEndingAddLine("vs. Orcan &amp; Skullian");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Yucha",c_orange);
 scrTrueEndingAddLine("Blackjack");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 2",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Ronald Jenkees",c_orange);
 scrTrueEndingAddLine("Guitar Sound");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Dr. Tapeworm the Horrible Thing",c_orange);
 scrTrueEndingAddLine("Sea of Darkness");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("The Guy boss",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Vicarious Visions Audio",c_orange);
 scrTrueEndingAddLine("Dingodile");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("REO",c_orange);
 scrTrueEndingAddLine("[Spiral Template]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 3",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("AN",c_orange);
 scrTrueEndingAddLine("[Six Soaring Wreaths]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Influka boss",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("MuryokuP",c_orange);
 scrTrueEndingAddLine("Sacred Secret");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Takeshi Abo",c_orange);
 scrTrueEndingAddLine("Skyclad Observer");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 4",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Manabu Namiki",c_orange);
 scrTrueEndingAddLine("East Asia");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Geezer boss",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Dimrain47",c_orange);
 scrTrueEndingAddLine("Cloud Control");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Sei-Peridot",c_orange);
 scrTrueEndingAddLine("Moon Wings (VY1)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 5",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("ParagonX9",c_orange);
 scrTrueEndingAddLine("HyperioxX");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Solgryn boss",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Keiki Kobayashi",c_orange);
 scrTrueEndingAddLine("Megalith (Agnus Dei)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Falcom Sound Team JDK",c_orange);
 scrTrueEndingAddLine("Aoi Kiseki");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Stage 6",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Krieg",c_orange);
 scrTrueEndingAddLine("F.O.O.L");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("TheLegendofRenegade",c_orange);
 scrTrueEndingAddLine("Buttville The Descent");
 scrTrueEndingAddLine("(CPS2 Extended Remix)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Boss Rush",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Spencer Nilsen",c_orange);
 scrTrueEndingAddLine("Ecco The Dolphin Opening Theme");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("ZUN",c_orange);
 scrTrueEndingAddLine("Hartmann's Youkai Girl");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Nobuo Uematsu",c_orange);
 scrTrueEndingAddLine("Battle With The Four Fiends");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("DJ the S",c_orange);
 scrTrueEndingAddLine("Wicked Child");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Synthescissor",c_orange);
 scrTrueEndingAddLine("MM5: Final Battle (Arranged)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Big kid boss",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("moAbi",c_orange);
 scrTrueEndingAddLine("Force Your Way");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Kulonekoorchestra",c_orange);
 scrTrueEndingAddLine("LIFE FORCE on ELECTRIBE MX");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Konami Kukeiha Club",c_orange);
 scrTrueEndingAddLine("Poison of Snake (Boss BGM)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("M-Stage",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Desfrank",c_orange);
 scrTrueEndingAddLine("The Foggy Cave in the Dark");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Kamilia boss",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Vicarious Visions Audio",c_orange);
 scrTrueEndingAddLine("Dr. Neo Cortex");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Vicarious Visions Audio",c_orange);
 scrTrueEndingAddLine("Dr. Neo Cortex Warped");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("E.S. Posthumus",c_orange);
 scrTrueEndingAddLine("Pompeii");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("AKI, H. Kobayashi, M. Yamane",c_orange);
 scrTrueEndingAddLine("Last Springsteen");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Naoshi Mizuta",c_orange);
 scrTrueEndingAddLine("Followers Of Chaos");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Ending",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Shinji Orito",c_orange);
 scrTrueEndingAddLine("Town, Flow of Time, People");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Extra stage",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Masafumi Takada",c_orange);
 scrTrueEndingAddLine("Kill Command");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Masafumi Takada",c_orange);
 scrTrueEndingAddLine("Kill Command (8-bit bug)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("COOL&amp;CREATE/BeatMARIO",c_orange);
 scrTrueEndingAddLine("Night of Nights");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("cornandbeans",c_orange);
 scrTrueEndingAddLine("Smithy Showdown");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Captain Lou Albano",c_orange);
 scrTrueEndingAddLine("Do The Mario");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("LarryInc64",c_orange);
 scrTrueEndingAddLine("SMB2 Player Select Music");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("[Yuuyu-P]",c_orange);
 scrTrueEndingAddLine("[Hiraishin]");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("AVTechNO!",c_orange);
 scrTrueEndingAddLine("boku-boku ver.180sec");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Masafumi Takada",c_orange);
 scrTrueEndingAddLine("DISTRUST");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("A.Dobos, A.Magyari",c_orange);
 scrTrueEndingAddLine("A.Armer, D.Javelosa",c_orange);
 scrTrueEndingAddLine("Convergence");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Lchavasse",c_orange);
 scrTrueEndingAddLine("Lunar Abyss");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("True ending",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Ichinoryu Uehara",c_orange);
 scrTrueEndingAddLine("Door to Paradise (Instrumental)");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("This game based on",c_orange);
 scrTrueEndingAddLine("I wanna kill the Kamilia 2 Remake",c_orange);
 scrTrueEndingAddLine("by SUDALV");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Secial thanks to",c_orange);
 scrTrueEndingAddLine("INFLUKA and Kamilia");
 scrTrueEndingAddLine("for the original game");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("Thank you for playing!",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("SUDALV, 2020",c_orange);
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 scrTrueEndingAddLine("");
 
 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///video timeline
/*
Когда я это делал, у меня уже были беды с башкой и не было вдохновения, 
я еле выстрадал этот таймлайн.
*/
if(t == 100)
{
 instance_create(96,192,objTrueEndingAComputer);
 for(var i = 0; i &lt; 9; i++)
 {
  block = instance_create(64,160+i*32,objTrueEndingBlock);
  block.sprite_index = sprBlockBossRush;
 }
 for(var i = 0; i &lt; 9; i++)
 {
  block = instance_create(64+i*32,384,objTrueEndingBlock);
  block.sprite_index = sprBlockBossRush;
 }
 bg = bgBossRush;
 scrTrueEndingSetBlackBlocks();
 
 doll = instance_create(192,375,objPlayerDoll);
 doll.gravity = 0;
}
if(t &gt;= 150 &amp;&amp; t &lt; 250)
{
 scrTrueEndingFadeIn();
}
if(t == 250)
{
 objTrueEndingAComputer.go = true;
}
if(t &gt;= 650 &amp;&amp; t &lt; 700)
{
 bg_speed += 0.03;
}
if(t == 700)
{
 bg_speed = 0;
 bg = -1;
 for(var i = -270; i &lt; 864; i += 45)
 {
  line = instance_create(i,304,objTrueEndingAGridSource);
  line.image_angle = 315;
  line.image_xscale = 5;
  line.image_alpha = 0.3;  
  line.gridAngle = point_direction(200,304,line.x,line.y)+45;
  line.distance = point_distance(line.x,line.y,200,304);
  line.x = 200 + lengthdir_x(line.distance,line.gridAngle);
  line.y = 304 + lengthdir_y(line.distance,line.gridAngle);
  
  line = instance_create(400,i,objTrueEndingAGridSource);
  line.image_angle = 45;
  line.image_xscale = 5;
  line.image_alpha = 0.3;
  line.gridAngle = point_direction(200,304,line.x,line.y)+45;
  line.distance = point_distance(line.x,line.y,200,304);
  line.x = 200 + lengthdir_x(line.distance,line.gridAngle);
  line.y = 304 + lengthdir_y(line.distance,line.gridAngle);
 }
}
if(t &gt;= 750 &amp;&amp; t &lt; 795)
{
 with(objTrueEndingAGridSource)
 {
  gridAngle -= 1
  x = 200 + lengthdir_x(distance,gridAngle);
  y = 304 + lengthdir_y(distance,gridAngle);
  image_angle -= 1;
 }
}
if(t == 830)
{
 with(objTrueEndingAGridSource)
 {
  if(image_angle == 270)
  {
   vspeed = 6;
  }
  else if(image_angle == 0)
  {
   hspeed = 6;
  }
 }
}
if(t == 950)
{
 with(objPlayerDoll)
 {
  isWarping = true;
 } 
}
if(t == 1000)
{
 with(objTrueEndingAComputer)
 {
  drawText = false;
 }
}
if(t == 1050)
{
 with(objTrueEndingAComputer)
 {
  isWarping = true;
 }
}
if(t &gt;= 1200 &amp;&amp; t &lt; 1300)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 1300)
{
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 1320)
{
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
}
if(t &gt;= 1400 &amp;&amp; t &lt; 1500)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}
if(t == 1500) //stage 1
{
 bg_back = bg93HM;
 bg = bg95HM;
 bg_speed = -1.5;
 scrTrueEndingSetBlackBlocks();
 
 for(var i = 0; i &lt; 12; i++)
 {
  b = instance_create(32+i*16,416,objBlock1BHM);
  b.depth = 0;
 }
 for(var i = 0; i &lt; 6; i++)
 {
  b = instance_create(32+i*32,416,objBlock1CHM);
  b.depth = -1;
 }
 block = instance_create(224,416,objTrueEndingBlock);
 block.sprite_index = sprBlock1DHM;
 block = instance_create(224-32*3,416-32*2,objTrueEndingBlock);
 block.sprite_index = sprBlock1DHM;
 block = instance_create(224+32*3,416-32*2,objTrueEndingBlock);
 block.sprite_index = sprBlock1DHM;
 
 spike = instance_create(224,384,objSpikeUp);
 spike.depth = 0;
 spike = instance_create(224-32*3,384-32*2,objSpikeUp);
 spike.depth = 0;
 spike = instance_create(224+32*3,384-32*2,objSpikeUp);
 spike.depth = 0;
 
 spike = instance_create(224-32*3,448-32*2,objSpikeDown);
 spike.depth = 0;
 spike = instance_create(224+32*3,448-32*2,objSpikeDown);
 spike.depth = 0;
 
 spike = instance_create(224-32*4,416-32*2,objSpikeLeft);
 spike.depth = 0;
 spike = instance_create(224+32*2,416-32*2,objSpikeLeft);
 spike.depth = 0;
 
 spike = instance_create(224-32*2,416-32*2,objSpikeRight);
 spike.depth = 0;
 spike = instance_create(224+32*4,416-32*2,objSpikeRight);
 spike.depth = 0;
 
 for(var i = 0; i &lt; 6; i++)
 {
  b = instance_create(256+i*32,416,objBlock1CHM);
  b.depth = -1;
 }
 for(var i = 0; i &lt; 12; i++)
 {
  b = instance_create(256+i*16,416,objBlock1AHM);
  b.depth = 0;
 }
}
if(t &gt;= 1600 &amp;&amp; t &lt; 1700)
{
 scrTrueEndingFadeIn();
}
if(t &gt;= 1900 &amp;&amp; t &lt; 2000)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objPlayerKiller)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objBlock1AHM)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objBlock1BHM)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objBlock1CHM)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 2000)
{
 bg = -1;
 bg_back = -1;
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 2020)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objPlayerKiller)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
 with(objBlock1AHM)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
 with(objBlock1BHM)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
 with(objBlock1CHM)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 2100 &amp;&amp; t &lt; 2200)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}

if(t == 2200+100) //stage 2
{
 scrObjectDestroy(objBlock1AHM);
 scrObjectDestroy(objBlock1BHM);
 scrObjectDestroy(objBlock1CHM);
 scrObjectDestroy(objPlayerKiller);
 scrTrueEndingSetBlackBlocks();
 for(var i = 0; i &lt; 3; i++)
 {
  spike = instance_create(64+i*32,192,objSpikeDown);
  spike.depth = 0;
 }
 for(var i = 0; i &lt; 12; i++)
 {
  block = instance_create(64 + i*32,160,objTrueEndingBlock);
  block.sprite_index = sprBlock1DHM;
  block = instance_create(64 + i*32,416,objTrueEndingBlock);
  block.sprite_index = sprBlock1DHM;
 }
 for(var i = 0; i &lt; 9; i++)
 {
  for(var j = 0; j &lt; 7; j++)
  {
   if(i == 0 &amp;&amp; j == 4 ||
   i == 1 &amp;&amp; j == 4 ||
   i == 2 &amp;&amp; j == 4 ||
   i == 2 &amp;&amp; j == 3 ||
   i == 2 &amp;&amp; j == 2 ||
   i == 3 &amp;&amp; j == 2 ||
   i == 4 &amp;&amp; j == 2 ||
   i == 5 &amp;&amp; j == 2 ||
   i == 5 &amp;&amp; j == 3 ||
   i == 5 &amp;&amp; j == 4 ||
   i == 4 &amp;&amp; j == 5 ||
   i == 5 &amp;&amp; j == 5 ||
   i == 6 &amp;&amp; j == 5 ||
   i == 7 &amp;&amp; (j &gt;= 1 &amp;&amp; j &lt;= 5) ||
   i == 8 &amp;&amp; j == 1 ||
   i == 9 &amp;&amp; j == 1)   
    continue;
   block = instance_create(160 + i*32,192 + j*32, objTrueEndingBlock);
   block.sprite_index = sprBlock1DHM;
  }
 }
}
if(t &gt;= 2500+100 &amp;&amp; t &lt; 2600+100)
{
 scrTrueEndingFadeIn();
}
if(t &gt;= 2800+100 &amp;&amp; t &lt; 2900+100)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objSpikeDown)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 2900+100)
{
 bg = -1;
 bg_back = -1;
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 2920+100)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objSpikeDown)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 3000+100 &amp;&amp; t &lt; 3100+100)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}

if(t == 3300+300) //stage 3
{
 scrObjectDestroy(objPlayerKiller);
 scrTrueEndingSetBlackBlocks();
 bg = bgBettyGrid;
 bg_back = bgBetty;
 bg_speed = -1.5;
 generator = instance_create(0,0,objBettySnowGenerator);
 generator.persistent = false;
 for(var i = -1; i &lt; 12; i++)
 {
  for(var j = 0; j &lt; 9; j++)
  {
   if(i &lt; 3 &amp;&amp; j == 0 ||
   i &lt; 3 &amp;&amp; j == 1 ||
   i &gt;= 5 &amp;&amp; i &lt; 11 &amp;&amp; j == 2 ||
   i &gt;= 5 &amp;&amp; i &lt; 8 &amp;&amp; j == 3)
   {
    block = instance_create(64+i*32,160+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockBettyA;
   }
    
   if(i &gt;= 3 &amp;&amp; j == 1 ||
   i &lt; 2 &amp;&amp; j == 6 ||
   i &gt;= 5 &amp;&amp; i &lt; 8 &amp;&amp; j == 6 ||
   i &gt;= 9 &amp;&amp; j == 6 ||
   j == 8
   )
   {
    block = instance_create(64+i*32,160+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockBettyB;
   }
   
   if(
   (i &gt;= 3 &amp;&amp; j == 0) ||
   (i == 0 || i == 1 || i == 9) &amp;&amp; j == 5 ||
   i &gt;= 5 &amp;&amp; j == 7)
   {
    block = instance_create(64+i*32,160+j*32,objSpikeUp);
    block.depth = 0;
   }
   
   if(i == 2 &amp;&amp; j == 2)
   {
    block = instance_create(64+i*32,160+j*32,objSpikeDown);
    block.depth = 0;
    block.image_xscale = 2;
    block.image_yscale = 2; 
   }
   
   if(i == 4 &amp;&amp; j == 2 ||
   i &gt;= 5 &amp;&amp; i &lt; 8 &amp;&amp; j == 4 ||
   i &gt;= 8 &amp;&amp; i &lt; 11 &amp;&amp; j == 3   
   )
   {
    block = instance_create(64+i*32,160+j*32,objSpikeDown);
    block.depth = 0;
   }
   
   if(i == 2 &amp;&amp; j == 6)
   {
    block = instance_create(64+i*32,160+j*32,objSpikeRight);
    block.depth = 0;
   }
   if(i == 4 &amp;&amp; j == 6)
   {
    block = instance_create(64+i*32,160+j*32,objSpikeLeft);
    block.depth = 0;
   }
  }
 }
}
if(t &gt;= 3300+300 &amp;&amp; t &lt; 3400+300)
{
 scrTrueEndingFadeIn();
}
if(t &gt;= 3600+300 &amp;&amp; t &lt; 3700+300)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objPlayerKiller)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 3700+300)
{
 bg = -1;
 bg_back = -1;
 with(objBettySnow)
 {
  speed = 0;
  gravity = 0;
 }
 scrObjectDestroy(generator);
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 3720+300)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objPlayerKiller)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
 with(objBettySnow)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 3800+300 &amp;&amp; t &lt; 3900+300)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}
if(t == 3900+300)
{
 scrObjectDestroy(objBettySnow);
 scrObjectDestroy(objPlayerKiller); 
}
shift = 100;
if(t == 4500 + shift) //stage 4
{
 bg = bgSecret5Grid;
 bg_back = background69; 
 scrTrueEndingSetBlackBlocks();
 for(var i = 0; i &lt; 12; i++)
 {
  for(var j = -1; j &lt; 10; j++)
  {
   if(i == 0 ||
   i == 4 &amp;&amp; j &lt;= 3 ||
   i == 11 &amp;&amp; j != 1 &amp;&amp; j != 8)
   {  
     block = instance_create(32+i*32,176+j*32,objTrueEndingBlock);
     block.sprite_index = sprBlockS5B;
   }
   
   if(i &gt;= 1 &amp;&amp; i &lt;= 10 &amp;&amp; j == 8 ||
   i &gt;= 5 &amp;&amp; i &lt;= 7 &amp;&amp; j == 4 ||
   i &gt;= 7 &amp;&amp; i &lt;= 10 &amp;&amp; j == 1)
   {
    block = instance_create(32+i*32,176+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockS5C;
   }
   if(i == 2 &amp;&amp; j == 7 ||
   i == 4 &amp;&amp; j == 4 ||
   i == 6 &amp;&amp; j == 1 ||
   i == 8 &amp;&amp; j == 4 ||
   i == 11 &amp;&amp; j == 1 ||
   i == 11 &amp;&amp; j == 8)
   {
    block = instance_create(32+i*32,176+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockS5A;
   }
  }
 }
}
if(t &gt;= 4500 + shift &amp;&amp; t &lt; 4600 + shift)
{
 scrTrueEndingFadeIn();
}
if(t == 4720)
{
 s5switcher = instance_create(0,0,objTrueEndingFlash);
 s5switcher.flash = true;
 s5switcher.alarm[0] = 3;
 for(var i = 0; i &lt; 12; i++)
 {
  for(var j = -1; j &lt; 10; j++)
  {
   if((i == 1 || i == 2) &amp;&amp; j == 7)
   {
    spike = instance_create(32+i*32,176+j*32,objSpikeUp);
    spike.depth = 0;
   }
  }
 }
}
if(t == 4750)
{
 s5switcher = instance_create(0,0,objTrueEndingFlash);
 s5switcher.flash = true;
 s5switcher.alarm[0] = 3;
 for(var i = 0; i &lt; 12; i++)
 {
  for(var j = -1; j &lt; 10; j++)
  {
   if(i == 2 &amp;&amp; j == 6 ||
   (i == 5 || i == 6 || i == 7) &amp;&amp; j == 7
   )
   {
    spike = instance_create(32+i*32,176+j*32,objSpikeUp);
    spike.depth = 0;
   }
   
  }
 } 
}
if(t == 4780)
{
 s5switcher = instance_create(0,0,objTrueEndingFlash);
 s5switcher.flash = true;
 s5switcher.alarm[0] = 3;
 for(var i = 0; i &lt; 12; i++)
 {
  for(var j = -1; j &lt; 10; j++)
  {
   if((i == 4 || i == 10) &amp;&amp; j == 7)
   {
    spike = instance_create(32+i*32,176+j*32,objSpikeUp);
    spike.depth = 0;
   }
  }
 } 
}
if(t &gt;= 4800 + shift &amp;&amp; t &lt; 4900 + shift)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objPlayerKiller)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 4900 + shift)
{
 bg = -1;
 bg_back = -1;
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 4920 + shift)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objPlayerKiller)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 5000 + shift &amp;&amp; t &lt; 5100 + shift)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}
if(t == 5100 + shift)
{
 scrObjectDestroy(objPlayerKiller); 
}
shift = 400;
if(t == 5200+shift) //stage 5
{
 bg = bgRukitoGrid;
 bg_back = bgRukitoBG;
 scrTrueEndingSetBlackBlocks();
 for(var i = 0; i &lt; 13; i++)
 {
  for(var j = 0; j &lt; 10; j++)
  {
   if(j &lt;= 2 || j == 9 ||
   (i == 7 || i == 9) &amp;&amp; (j == 7 || j == 8)
   )
   {
    block = instance_create(32+i*32,144+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockRukito;
   }
   
   if(j == 3 ||
   (i == 3 || i == 4) &amp;&amp; j == 5)
   {
    spike = instance_create(32+i*32,144+j*32,objSpikeDown);
    spike.depth = 0;
   }
   
   if((i == 2 || i == 3 || i == 4) &amp;&amp; j == 4 ||
   i == 3 &amp;&amp; j == 6)
   {
    spike = instance_create(32+i*32+16,144+j*32,objSpikeDown);
    spike.depth = 0; 
   }
   
   if((i == 7 || i == 9) &amp;&amp; j == 6)
   {
    spike = instance_create(32+i*32,144+j*32,objSpikeUp);
    spike.depth = 0; 
   }
   if(i == 12 &amp;&amp; (j == 7 || j == 8))
   {
    spike = instance_create(32+i*32,144+j*32,objSpikeLeft);
    spike.depth = 1;
    spike.hspeed = -1;
   }
  }
 }
}
if(t &gt;= 5200+shift &amp;&amp; t &lt; 5300+shift)
{
 scrTrueEndingFadeIn();
}
if(t == 5488+shift)
{
 with(objSpikeLeft)
 {
  spike = instance_create(x,y,objSpikeLeft); //xstart update
  spike.depth = 1;
  instance_destroy();
 }
}
if(t &gt;= 5550+shift &amp;&amp; t &lt; 5650+shift)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objPlayerKiller)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 5650+shift)
{
 bg = -1;
 bg_back = -1;
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 5670+shift)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objPlayerKiller)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 5750+shift &amp;&amp; t &lt; 5850+shift)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}
if(t == 5850+shift)
{
 scrObjectDestroy(objPlayerKiller); 
}

shift = 400;
if(t == 6000 + shift) //stage 6-1
{
 bg = bgBaka;
 bg_back = -1;
 scrTrueEndingSetBlackBlocks();
 for(var i = 0; i &lt;= 12; i++)
 {
  for(var j = 0; j &lt;= 10; j++)
  {
   if(
   (i == 5 || i == 7) &amp;&amp; j == 1 ||
   (i == 10 || i == 12) &amp;&amp; j == 2 ||
   i == 2 &amp;&amp; j == 3 ||
   (i == 0 || i == 3 || i == 5 || i == 10) &amp;&amp; j == 4 ||
   (i == 6 || i == 9 || i == 11) &amp;&amp; j == 5 ||
   (i == 2 || i == 4) &amp;&amp; j == 7
   )
   {
    block = instance_create(32+i*32,120+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockBakaA;
   }
   
   if(i == 6 &amp;&amp; j == 1 ||
   i == 11 &amp;&amp; j == 2 ||
   (i == 1 || i == 2) &amp;&amp; j == 4 ||
   j == 10
   )
   {
    block = instance_create(32+i*32,120+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockBakaB;
   }
   
   if(i == 4 &amp;&amp; (j == 8 || j == 9))
   {
    block = instance_create(32+i*32,120+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockBakaC; 
   }
   
   if((i == 9 || i == 11) &amp;&amp; j == 1 ||
   i == 2 &amp;&amp; j == 2 ||
   (i == 1 || i == 3) &amp;&amp; j == 3 ||
   (i == 4 || i == 6 || i == 9 || i == 11) &amp;&amp; j == 4 ||
   (i == 7 || i == 8) &amp;&amp; j == 5 ||
   (i == 2 || i == 4 || i == 11) &amp;&amp; j == 6 ||
   (i == 1 || i == 7 || i == 8 || i == 10) &amp;&amp; j == 8 ||
   (i == 3 || (i &gt;= 6 &amp;&amp; i &lt;= 10)) &amp;&amp; j == 9)
   {
    spike = instance_create(32+i*32,120+j*32,objSpikeUp);
    spike.depth = 0; 
   }
   
   if((i == 3 || i == 4) &amp;&amp; j == 1 ||
   (i &gt;= 5 &amp;&amp; i &lt;= 8) &amp;&amp; j == 2 ||
   i == 12 &amp;&amp; j == 3 ||
   i == 5 &amp;&amp; j == 5 ||
   i == 9 &amp;&amp; j == 6 ||
   i == 11 &amp;&amp; j == 7 ||
   i == 2 &amp;&amp; j == 8 ||
   i == 1 &amp;&amp; j == 9)
   {
    spike = instance_create(32+i*32,120+j*32,objSpikeDown);
    spike.depth = 0; 
   }
   
   if(i == 8 &amp;&amp; j == 1)
   {
    spike = instance_create(32+i*32,120+j*32,objSpikeRight);
    spike.depth = 0; 
   }
  }
 }
}
if(t &gt;= 6000 + shift &amp;&amp; t &lt; 6100 + shift)
{
 scrTrueEndingFadeIn();
}
if(t &gt;= 6200 + shift &amp;&amp; t &lt; 6300 + shift)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objPlayerKiller)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 6300 + shift)
{
 bg = -1;
 bg_back = -1;
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 6320 + shift)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objPlayerKiller)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 6400 + shift &amp;&amp; t &lt; 6500 + shift)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}
if(t == 6500 + shift)
{
 scrObjectDestroy(objPlayerKiller); 
}
if(t == 6600 + shift) //stage 6-2
{
 bg = bgLeeheGrid;
 bg_back = -1;
 scrTrueEndingSetBlackBlocks();
 for(var i = 0; i &lt;= 12; i++)
 {
  for(var j = 0; j &lt;= 10; j++)
  {
   if(j == 0 ||
   j == 3 &amp;&amp; (i == 9 || i == 12) ||
   j == 4 &amp;&amp; (i &lt;= 2 || i &gt;= 8) ||
   j == 5 &amp;&amp; (i == 1 || i &gt;= 8) ||
   j &gt;= 6 &amp;&amp; (i &gt;= 9) ||
   j == 8 &amp;&amp; (i == 2 || i == 3) ||
   j == 9 &amp;&amp; i &lt;= 4)
   {
    block = instance_create(32+i*32,140+j*32,objTrueEndingBlock);
    block.sprite_index = sprBlockLeeheA;
   }   
   
   if(j == 2 &amp;&amp; (i == 9 || i == 12) ||
   j == 7 &amp;&amp; (i == 2 || i == 3) ||
   j == 8 &amp;&amp; i == 0)
   {
    spike = instance_create(32+i*32,140+j*32,objSpikeUp);
    spike.depth = 0; 
   }
   
   if(j == 1 &amp;&amp; i == 1)
   {
    spike = instance_create(32+i*32,140+j*32,objSpikeDown);
    spike.depth = 0; 
   }
   
   if(i == 3 &amp;&amp; j == 4 ||
   i == 4 &amp;&amp; j == 8 ||
   i == 5 &amp;&amp; j == 9)
   {
    spike = instance_create(32+i*32,140+j*32,objSpikeRight);
    spike.depth = 0; 
   }
   
   if(i == 7 &amp;&amp; (j == 4 || j == 5) ||
   i == 8 &amp;&amp; (j == 6 || j == 7 || j == 8) ||
   i == 0 &amp;&amp; j == 5)
   {
    spike = instance_create(32+i*32,140+j*32,objSpikeLeft);
    spike.depth = 0; 
   }
  }
 }
}
if(t &gt;= 6600 + shift &amp;&amp; t &lt; 6700 + shift)
{
 scrTrueEndingFadeIn();
}
if(t &gt;= 6800 + shift &amp;&amp; t &lt; 6900 + shift)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objPlayerKiller)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
}
if(t == 6900 + shift)
{
 bg = -1;
 bg_back = -1;
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 6920 + shift)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objPlayerKiller)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 7000 + shift &amp;&amp; t &lt; 7100 + shift)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}
if(t == 7100 + shift)
{
 scrObjectDestroy(objPlayerKiller); 
}
if(t == 7200 + shift) //abyss
{
 bgAbyss = instance_create(-200,0,oRedAbyssBackground);
 bgAbyss.depth = 1;
 scrTrueEndingSetBlackBlocks();
 for(var i = 0; i &lt;= 12; i++)
 {
  for(var j = 0; j &lt;= 10; j++)
  {
   if(j == 9)
   {
    block = instance_create(32+i*32,120+j*32,objTrueEndingBlock);
    block.sprite_index = sprRedHorizontalBlock;
    block.image_speed = 0;
   }
   if(i == 2 &amp;&amp; j == 9)
   {
    line1 = instance_create(32+i*32,120+j*32+1,oRedLightLine);
    line1.image_xscale = 12;
    line1.depth = 0;
    line2 = instance_create(32+i*32,120+j*32+28,oRedLightLine);
    line2.image_xscale = 12;
    line2.depth = 0;
   }
  }
 }
 oRedLightLineDrawMechanism.depth = -1;
}
if(t &gt;= 7200 + shift &amp;&amp; t &lt; 7300 + shift)
{
 scrTrueEndingFadeIn();
}
if(t &gt;= 7300 + shift &amp;&amp; t &lt; 7350 + shift)
{
 scrObjectDestroy(oRedLineImpulse);
 flash1 = scrRedCreateActiveImpulse( line1, (t-7299-shift)*6 , c_teal, 1 );
 flash1.image_xscale = 2;
 flash1.depth = 1;
 
 flash2 = scrRedCreateActiveImpulse( line2, (t-7299-shift)*6 , c_teal, 1 );
 flash2.image_xscale = 2;
 flash2.depth = 1;
}
if(t &gt;= 7350 + shift &amp;&amp; t &lt; 7400 + shift)
{
 scrObjectDestroy(oRedLineImpulse);
 flash1 = scrRedCreateActiveImpulse( line1, line1.sprite_width - (t-7299-shift)*6 , c_teal, 1 );
 flash1.image_xscale = 2;
 flash1.depth = 1;
 
 flash1 = scrRedCreateActiveImpulse( line2, line1.sprite_width - (t-7299-shift)*6 , c_teal, 1 );
 flash1.image_xscale = 2;
 flash1.depth = 1;
}
if(t == 7400 + shift)
{
 scrObjectDestroy(oRedLineImpulse);
 scrObjectDestroy(oRedLightLine);
}

if(t &gt;= 7450 + shift &amp;&amp; t &lt; 7550 + shift)
{
 with(objTrueEndingBlock)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 with(objPlayerKiller)
 {
  x = xstart + irandom_range(-1,1);
  y = ystart + irandom_range(-1,1);
 }
 
}
if(t == 7550 + shift)
{
 scrObjectDestroy(bgAbyss);
 with(objTrueEndingShatteredBlack)
 {
  image_xscale = 0.96;
  image_yscale = 0.96;
 }
}
if(t == 7570 + shift)
{ 
 with(objTrueEndingBlock)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;
 }
 with(objPlayerKiller)
 {
  direction = point_direction(200,304,x,y);
  speed = 5;  
 }
}
if(t &gt;= 7600 + shift &amp;&amp; t &lt; 7700 + shift)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}

if(t == 8400)
{
 scrTrueEndingSetBlackBlocks();
 bg = bgBossRush;
 leftX = 45;
 rightX = 420;
 topY = 120;
 bottomY = 440;
 for(var i = topY - 32*5; i &lt;= bottomY;i+=32) //boss 1
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprBlock1DHM;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprBlock1DHM;
  block.outsideDelete = false;
 }
 jirachi = instance_create(rightX - 100,bottomY - 32*11,objTrueEndingJirachi);
 jirachi.vspeed = 0.73;
 
 nextY = topY - 32*5;
 for(var i = nextY - 32*9; i &lt;= nextY;i+=32) //boss 2
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockB1HM;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockB1HM;
  block.outsideDelete = false;
 }
 laserSpawner = instance_create(leftX+48,nextY-32,objTrueEndingLaserSpawner);
 laserSpawner.vspeed = 0.73;
 
 nextY = nextY - 32*9;
 for(var i = nextY - 32*9; i &lt;= nextY;i+=32) //boss 3
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockDoruppi;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockDoruppi;
  block.outsideDelete = false;
 }
 lukaSpawner = instance_create(leftX,nextY-32*5,objTrueEndingLukaSpawner);
 lukaSpawner.vspeed = 0.73;
 
 nextY = nextY - 32*9;
 for(var i = nextY - 32*9; i &lt;= nextY;i+=32) //boss 4
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockKoalaA;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockKoalaA;
  block.outsideDelete = false;
 }
 repeat(2)
 {
     bat = instance_create(leftX+32*4,nextY-32*4,objTrueEndingBat);
     bat.topY = nextY - 32*9;
     bat.bottomY = nextY;
     bat.leftX = leftX+48;
     bat.rightX = rightX-16;
 }
 
 nextY = nextY - 32*9;
 for(var i = nextY - 32*9; i &lt;= nextY;i+=32) //boss 5
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockCyberA;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockCyberA;
  block.outsideDelete = false;
 }
 cyberSpawner = instance_create(leftX+180,nextY-32*8,objTrueEndingCurvingSpawner);
 cyberSpawner.vspeed = 0.73;
 
 nextY = nextY - 32*9;
 for(var i = nextY - 32*9; i &lt;= nextY;i+=32) //boss 6
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockBoss6B;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprBlockBoss6B;
  block.outsideDelete = false;
 }
 ballAngle = random_range(30,60);
 repeat(4)
 {
  ball = instance_create(leftX + 144,nextY-32*5,objTureEndingBlueBall);
  ball.direction = ballAngle;
  ball.speed = 5;
  ball.leftX = leftX+48;
  ball.rightX = rightX-16;
  ball.topY = nextY-32*8;
  ball.bottomY = nextY-32;
  
  ballAngle+=90;
 }
 
 nextY = nextY - 32*9;
 for(var i = nextY - 32*9; i &lt;= nextY;i+=32) //M-Stage
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprMBlock;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprMBlock;
  block.outsideDelete = false;
 }
 
 for(var temp = leftX+32; temp &lt; rightX; temp += 32)
 {
  laser = instance_create(temp,y,objMLaser);
  laser.depth = 1;
 }
 mlaserController = instance_create(0,nextY-32*5,objTrueEndingMLaserController);
 mlaserController.vspeed = 0.73;
 
 nextY = nextY - 32*9;
 for(var i = nextY - 32*15; i &lt;= nextY;i+=32) //Камилия
 {
  block = instance_create(leftX,i,objTrueEndingBlock);
  block.sprite_index = sprLastBlock;
  block.outsideDelete = false;
  
  block = instance_create(rightX,i,objTrueEndingBlock);
  block.sprite_index = sprLastBlock;
  block.outsideDelete = false;
 }
 var angle = irandom_range(10,30);
 repeat(5)
 {
  bullet = instance_create(leftX+160,nextY-32*5,objTrueEndingKamiliaBullet);
  bullet.speed = 8;
  bullet.direction = angle;
  bullet.leftX = leftX+48;
  bullet.rightX = rightX-16;
  bullet.topY = nextY-32*9;
  bullet.bottomY = nextY;
  with(bullet) event_user(0);
  
  angle+=360/5;
 }
 
 with(objTrueEndingBlock)
 {
  vspeed = 0.73;
 }
}
if(t &gt;= 8400 &amp;&amp; t &lt; 8500)
{
 scrTrueEndingFadeIn();
}
if(t &gt;= 8400 &amp;&amp; t &lt; 11530)
{
 with(objTrueEndingBlock)
 {
  if(y &gt;= other.bottomY-64)
  {
    outsideDelete = true;
  }
 }
 with(objTrueEndingJirachi)
 {
  if(y &gt;= other.bottomY+64)
  {
   instance_destroy();
  }
 }
 with(objJirachistar)
 {
  y+=0.73;
 }
 with(objTrueEndingLaserSpawner)
 {
  if(y &gt;= other.bottomY+128)
  {
   instance_destroy();
  }
 }
 with(objGustavLock)
 {
  y+=0.73;
 }
 with(objGustavLaser)
 {
  y+=0.73;
  image_yscale = 0.45;
 }
 with(objTrueEndingLukaSpawner)
 {
  if(y &gt;= other.bottomY+32)
  {
   instance_destroy();
  }
 }
 with(objLukaGalgori)
 {
  depth = 1;
  y+=0.73;
 }
 with(objTrueEndingBat)
 {
  if(y &gt;= bottomY + 256)
  {
   instance_destroy();
  }
 }
 with(objCyberBulletFX)
 {
  y+=0.73;
 }
 with(objCyberBullet)
 {
  if(y &lt; other.topY || y &gt; other.bottomY)
  {
   image_alpha -= 0.1;
   if(image_alpha &lt;= 0)
    instance_destroy();
  }
 }
 with(cyberSpawner)
 {
  if(y &gt; other.bottomY)
   instance_destroy();
 }
 with(objTureEndingBlueBall)
 {
  if(y &gt; other.bottomY+256)
   instance_destroy();
 }
 with(objTrueEndingKamiliaBullet)
 {
  if(y &gt; other.bottomY+256)
   instance_destroy();
 }
}
if(t == 11530)
{
 with(objTrueEndingBlock)
 {
  direction = point_direction(250,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(250,304,x,y);
  speed = 5;
 }
 with(objTrueEndingKamiliaBullet)
 {
  instance_destroy();
 }
 with(objTrueEndingKamiliaBulletTail)
 {
  instance_destroy();
 }
 bg = -1;
}
if(t &gt;= 11600 &amp;&amp; t &lt; 11700)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}

if(t &gt;= 12040 &amp;&amp; t &lt; 12140) //extra
{
 scrTrueEndingFadeIn();
}

if(t == 12040)
{
 bg = bgFinalDeadRoomGRID;
 scrTrueEndingSetBlackBlocks();
 for(var i = 0; i &lt;= 12; i++)
 {
  for(var j = 0; j &lt;= 9; j++)
  {
   if(i == 0 || i == 12 || j == 0 || j == 9)
   {
    block = instance_create(32+i*32,140+j*32,objTrueEndingBlock);
    block.sprite_index = sprFinalDeadRoomBlock;
   }
   if(i == 6)
   {
    laser1 = instance_create(32+i*32+16,140+j*32,objTrueEndingFDRLaser);
    laser1.depth = 1;
    laser1.hspeed = 0.2;
    
    laser2 = instance_create(32+i*32+16,140+j*32,objTrueEndingFDRLaser);
    laser2.depth = 1;
    laser2.hspeed = -0.2;
   }
  }
 }
}
if(t == 12740)
{
 centerX = 240;
 centerY = 304;
 clock = instance_create(centerX,centerY,objTrueEndingClock);
 clock.image_alpha = 0;
}
if(t &gt;= 12740 &amp;&amp; t &lt; 12840)
{
 clock.image_alpha += 0.01;
}
if(t == 12840)
{
 hand1 = instance_create(centerX,centerY,objTrueEndingClockHand);
 hand1.image_angle = -90; //0
 hand1.image_alpha = 0;
 
 hand2 = instance_create(centerX,centerY,objTrueEndingClockHand);
 hand2.image_angle = 90; //180
 hand2.image_alpha = 0;
}
if(t &gt;= 12840 &amp;&amp; t &lt; 12890)
{
 hand1.image_alpha += 0.02;
 hand2.image_alpha += 0.02;
}
if(t &gt;= 12900 &amp;&amp; t &lt; 13125)
{
 hand1.image_angle -= 0.4;
 hand2.image_angle += 0.4;
}
if(t &gt;= 13170 &amp;&amp; t &lt; 13700)
{
 hand1.image_angle += 0.34;
 hand2.image_angle -= 0.34;
}

if(t == 13700)
{
 bg = -1;
 with(objTrueEndingBlock)
 {
  direction = point_direction(250,304,x,y);
  speed = 5;
 }
 with(objTrueEndingShatteredBlack)
 {
  direction = point_direction(250,304,x,y);
  speed = 5;
 }
 scrObjectDestroy(objTrueEndingClock);
 scrObjectDestroy(objTrueEndingClockHand);
}

if(t &gt;= 13740 &amp;&amp; t &lt; 13840)
{
 if(fade.image_alpha &lt; 1)
  fade.image_alpha += 0.01;
}

if(t == 14800)
{
 with(objTrueEndingText)
 {
  speed = 0;
 }
}
if(t == 15100)
{
 room_goto(rHomeGood);
}
t++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bg_speed
bg_x += bg_speed;
bg_y += bg_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bg_back != -1)
{
 draw_background_tiled_ext(bg_back,bg_x,bg_y,1,1,c_white,bg_alpha);
}
if(bg != -1)
{
 draw_background_tiled_ext(bg,bg_x,bg_y,1,1,c_white,bg_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
