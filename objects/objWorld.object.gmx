<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//make sure we never have more than one world object

if (instance_number(object_index) &gt; 1)
    instance_destroy();
    
speedrunFlag = -1;
oldScore = 0;
oldPlayerExists = 0;
deadSplitFlag = 0;
drawEnergy = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawEnergy = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DeadSplit flag down
deadSplitFlag = false;
scrDeadSplitUpdate();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return to previous window position/size (after using display_reset)

if (!window_get_fullscreen())
{
    window_set_position(global.windowXPrev,global.windowYPrev);
    window_set_size(global.windowWidthPrev,global.windowHeightPrev);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause current music when it's done fading out

audio_pause_sound(global.currentMusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DeadSplit value update
if(oldPlayerExists &amp;&amp; !instance_exists(objPlayer))
{
 deadSplitFlag = 0;
 scrDeadSplitUpdate();
}
else if(oldScore != score)
 scrDeadSplitUpdate();
 
oldScore = score;
oldPlayerExists = instance_exists(objPlayer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objWorld</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game checks

//controller checks
if (global.controllerEnabled &amp;&amp; global.controllerIndex != -1)
{
    if (!global.controllerMode)  //check if we should switch to controller mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            global.controllerDelay = -1;
        }
        else if (scrAnyControllerButton() != -1)
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
    }
    else    //check if we should switch to keyboard mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
        else if (scrAnyControllerButton() != -1)
        {
            global.controllerDelay = -1;
        }
    }
    
    if (global.controllerDelay != -1)   //check delay for switching between keyboard/controller
    {
        if (global.controllerDelay == 0)    //delay over, toggle controller mode
        {
            global.controllerMode = !global.controllerMode;
            global.controllerDelay = -1;
        }
        else
        {
            global.controllerDelay -= 1;
        }
    }
}

if (global.gameStarted)
{
    //handle pausing
    if (global.pauseDelay &lt;= 0) //check if pause delay is active
    {
        if (scrButtonCheckPressed(global.pauseButton))
        {
            if (!global.gamePaused)  //game currently not paused, pause the game
            {
                if (!global.noPause)
                {
                    global.gamePaused = true;  //set the game to paused
                    global.pauseDelay = global.pauseDelayLength; //set pause delay
                    
                    instance_deactivate_all(true);  //deactivate everything
                    
                    global.pauseSurf = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));    //create new surface
                    surface_copy(global.pauseSurf,0,0,application_surface);             //copy current screen to it
                }
            }
            else    //game currently paused, unpause the game
            {
                global.gamePaused = false;  //set the game to unpaused
                global.pauseDelay = global.pauseDelayLength;     //set pause delay
                
                instance_activate_all();    //reactivate objects
                
                if (surface_exists(global.pauseSurf))
                    surface_free(global.pauseSurf);         //free the surface
                
                scrSaveConfig();    //save config in case volume levels were changed
                
                io_clear(); //clear input states to prevent possible pause strats/exploits
            }
        }
    }
    else
    {
        global.pauseDelay -= 1;
    }
    
    if (!global.gamePaused) //check if the game is currently paused
    {
        if (scrButtonCheckPressed(global.restartButton) &amp;&amp; room != rEnding)
        {
            //stop death sound/music
            audio_stop_sound(global.deathSound);
            audio_stop_sound(global.gameOverMusic);
            audio_stop_sound(global.sndGameList);
            audio_stop_sound(global.curDanmaku);
            scrStopSFX();
            scrObjectDestroy(objEnergy);
            for(var temp = 0; temp &lt; 100; temp++)
            {
             global.energy[temp] = global.saveEnergy[temp];
            }
            score = 0; //DeadSplit support
            
            //resume room music
            audio_resume_sound(global.currentMusic);
            
            ///return to old gain if music is being faded out
            if (global.musicFading)
            {
                global.musicFading = false;
                audio_sound_gain(global.currentMusic,global.currentGain,0);
                alarm[0] = -1;   //reset alarm that pauses music
            }
            for(var i = 0; i &lt; 10; i++)
            {
                global.tempTrigger[i] = 0;
            }
            for (var i = global.secretItemTotal-1; i &gt;= 0; i--)
            {
                global.tempItem[i] = false;
            }
            for(var i = 0; i &lt;= 3; i++)
            {
                global.crashPortal[i] = false;
            }
            scrSaveGame(false); //save death/time
            scrLoadGame(false); //load the game
        }
        
        if ((global.timeWhenDead || instance_exists(objPlayer)))  //increment timer
        {
            global.timeMicro += delta_time;
            global.time += global.timeMicro div 1000000;
            global.timeMicro = global.timeMicro mod 1000000;
        }
        if(room_speed != global.worldSpeed)
         room_speed = global.worldSpeed;
    }
    else    //game is paused, check for volume controls
    {
        if (scrButtonCheck(global.upButton))
        {
            if (global.volumeLevel &lt; 100)
                global.volumeLevel += 1;
        }
        else if (scrButtonCheck(global.downButton))
        {
            if (global.volumeLevel &gt; 0)
                global.volumeLevel -= 1;
        }
        
        audio_master_gain(global.volumeLevel/100);  //set master gain
    }
    
    scrSetRoomCaption();    //keep caption updated
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///function keys

if (keyboard_check_pressed(vk_escape))
{
    game_end();
}

var f2pressed = false;
if(global.controllerSystemButtonsEnabled)
{
 f2pressed = keyboard_check_pressed(vk_f2) || gamepad_button_check_pressed(global.controllerIndex,gp_shoulderrb);
}
else
{
 f2pressed = keyboard_check_pressed(vk_f2);
}

if (f2pressed)
{
    scrRestartGame();
    exit;
}

var f4pressed = false;
if(global.controllerSystemButtonsEnabled)
{
 f4pressed = keyboard_check_pressed(vk_f4) || gamepad_button_check_pressed(global.controllerIndex,gp_shoulderlb);
}
else
{
 f4pressed = keyboard_check_pressed(vk_f4);
}

if (f4pressed &amp;&amp; !global.gamePaused)    //toggle fullscreen mode
{
    global.fullscreenMode = !global.fullscreenMode;
    
    window_set_fullscreen(global.fullscreenMode);
    
    scrSaveConfig();    //save fullscreen setting
}

if (keyboard_check_pressed(vk_f8) &amp;&amp; !global.gamePaused)    //reset window size
{
    scrResetWindowSize();
}

if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("M")) &amp;&amp; !global.gamePaused)
{
    //toggle mute music setting
    scrToggleMusic();
    
    scrSaveConfig();    //save mute setting
}

if(keyboard_check_released(ord("G")))
{
 global.godMode = !global.godMode;
}
if(keyboard_check_released(vk_pageup))
{
 room_goto_previous();
}
if(keyboard_check_released(vk_pagedown))
{
 room_goto_next();
}
if(keyboard_check_released(vk_home))
{
 global.worldSpeed = 50;
}
if(keyboard_check_released(vk_end))
{
 global.worldSpeed = 150;
}
if(keyboard_check(vk_tab))
{
 with(objPlayer)
 {
  x = mouse_x;
  y = mouse_y;
 }
}
if(keyboard_check_released(vk_backspace))
{
 global.debug = !global.debug;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///F5
var f5pressed = false;
if(global.controllerSystemButtonsEnabled)
{
 f5pressed = scrButtonCheckReleased(global.alignRightButton);
}
else
{
 f5pressed = keyboard_check_released(global.alignRightButton[0]);
}

if(f5pressed)
{
    if((global.portalAvailable))
    {
        for (var i = global.secretItemTotal-1; i &gt;= 0; i--)
        {
            global.tempItem[i] = false;
        }
        
        switch(room)
        {
            case rStage0:
            case rStage1Chocko:
            case rStage1GGM:
            case rStage1EnjoyTheGame:
            case rStage1CTB1:
            case rStage1MysHouse:
            case rStage1YellowStar:
            case rStage1DarkBlue:
            case rStage1Exp:
            case rStage1Fortress:
            case rStage1Fangame:
                global.lastRunStart[0] = -1; global.lastRunEnd[0] = -1; break;
            
            case rBoss1Save:
            case rBoss1Volcano:
                global.lastRunStart[1] = -1; global.lastRunEnd[1] = -1; break;
            
            case rStage2CTB2:
            case rStage2DT:
            case rStage2GreenMoon:
            case rStage2Showdown:
            case rStage2Green:
            case rStage2Tribute:
            case rStage2Yassan:
            case rStage2RunTerminal:
            case rStage2BestGuy:
            case rStage2GuyTower:
            case rStage2GuyTower2: 
                global.lastRunStart[2] = -1; global.lastRunEnd[2] = -1; break;
            
            case rBoss2Guy:        
            case rBoss2Save:
                global.lastRunStart[3] = -1; global.lastRunEnd[3] = -1; break;
            
            case rStage3500:
            case rStage3Uhuhu:
            case rStage3Skyclad:
            case rStage3CQ:
            case rStage3Rukimin:
            case rStage3Diverse:
            case rStage3HeavenTrap:
            case rStage3SeeTheMoon:
            case rStage3WhiteCherry:
            case rStage3TimeMachine:
            case rStage3TimeMachine2:
                global.lastRunStart[4] = -1; global.lastRunEnd[4] = -1; break;
            
            case rBoss3Save:
            case rBoss3Phase1:
            case rBoss3Phase2:
            case rBoss3Phase3:
            case rBoss3Avoid1:
            case rBoss3Avoid2:
            case rBoss3Avoid3:
            case rBoss3Avoid4:
            case rBoss3Rip:
                global.lastRunStart[5] = -1; global.lastRunEnd[5] = -1; break;
            
            case rStage4Galaxy:
            case rStage4GB:
            case rStage4Phantom:
            case rStage4Device:
            case rStage4HeavenTrap:
            case rStage4ShinySparkA: 
            case rStage4ShinySparkB:
            case rStage4ShinySparkC:
            case rStage4Conscience:
            case rStage4Explorer:
            case rStage4Competitor:
            case rStage4KTGA:
            case rStage4KTGB:
                global.lastRunStart[6] = -1; global.lastRunEnd[6] = -1; break;
                
            case rBoss4Save:
            case rBoss4Phase1:
            case rBoss4Avoid:
            case rBoss4Phase2:
                global.lastRunStart[7] = -1; global.lastRunEnd[7] = -1; break;
            
            case rStage5Color:
            case rStage5Scapegoat:
            case rStage5Symetry:
            case rStage5RainbowMiku:
            case rStage5Unknown:
            case rStage5BloodFestival:
            case rStage5Dieary:
            case rStage5PYF:
            case rStage5Locus:
            case rStage5Boshy:
            case rStage5BoshyB:
                global.lastRunStart[8] = -1; global.lastRunEnd[8] = -1; break;
                
            case rBoss5Save:
            case rBoss5Phase1:
            case rBoss5Phase2:
            case rBoss5Avoid:
            case rBoss5Phase3:
            case rBoss5Death:
                global.lastRunStart[9] = -1; global.lastRunEnd[9] = -1; break;
                
            case rStage6GR:
            case rStage6DotKid:
            case rStage6Crimson:
            case rStage6Destination: 
            case rStage6BreakingOut: 
            case rStage6SevenTrials:
            case rStage6Sadist:
            case rStage6Catastrophe:
            case rStage6Popularity:
            case rStage6LoveTrap: 
                global.lastRunStart[10] = -1; global.lastRunEnd[10] = -1; break;
    
            case rBoss6GravityMan:
            case rBoss6Nue:    
            case rBoss6Crimson:
            case rBoss6Destination:
            case rStage6BossRush:
            case rBoss6Phase1: 
            case rBoss6Phase2:
                global.lastRunStart[11] = -1; global.lastRunEnd[11] = -1; break;
            
            case rStage7:
                global.lastRunStart[12] = -1; global.lastRunEnd[12] = -1; break;
            
            case rStage7B:
            case rBoss7Phase1:
            case rBoss7Phase2:
            case rBoss7Phase4:
                global.lastRunStart[13] = -1; global.lastRunEnd[13] = -1; break;
        }
        global.currentSegmentIndex = -1;
        scrObjectDestroy(objEnergy);
        for(var temp = 0; temp &lt; 100; temp++)
        {
         global.energy[temp] = global.saveEnergy[temp];
        }
        for(var i = global.stagesTotal; i &gt;= 0; i--)
        {
         global.stageUnlocked[i] = global.saveStageUnlocked[i];
        }
        audio_stop_sound(global.sndGameOver);
        scrStopSFX();
        ///return to old gain if music is being faded out
        if (global.musicFading)
        {
            global.musicFading = false;
            audio_sound_gain(global.currentMusic,global.currentGain,0);
            objWorld.alarm[0] = -1;   //reset alarm that pauses music
        } 
        room_goto(rStage6BossRush);
        if(global.grav == -1)
            scrFlipGrav(true);
        with(objPlayer)
        {
            instance_destroy();
        }
        instance_create(96,256,objPlayer);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///music loops
switch(room)
{
 case rBoss6Phase2:
      if(global.currentMusicID == global.sndBoss6B)
      {
       if(audio_sound_get_track_position(global.currentMusic) &gt;= 75)
       {
        audio_sound_set_track_position(global.currentMusic, 7.72);
       }
      }
      break;
 case rBoss6Death:
 case rStage7:
      if(audio_sound_get_track_position(global.currentMusic) &gt;= 111.712)
      {
       audio_sound_set_track_position(global.currentMusic, 0.934);
      }
      break;
 case rBoss7Phase1:
      if(audio_sound_get_track_position(global.currentMusic) &gt;= 107.841)
      {
       audio_sound_set_track_position(global.currentMusic, 5.906);
      }
      break;
 case rBoss7Phase4:
 case rEscapeA:
 case rEscapeB:
 case rEscapeC:
      if(global.currentMusicID == global.sndBoss7B)
      {
          if(audio_sound_get_track_position(global.currentMusic) &gt;= 198.265)
          {
           audio_sound_set_track_position(global.currentMusic, 8.408);
          }
      }
      if(global.currentMusicID == global.sndExtra)
      {
          if(audio_sound_get_track_position(global.currentMusic) &lt; 59.3)
          {
           audio_sound_set_track_position(global.currentMusic, 59.3);
          }
      }
      break;
 case rExtraStageFinalDeadRoom:
      if(audio_sound_get_track_position(global.currentMusic) &gt;= 150.150)
      {
       audio_sound_set_track_position(global.currentMusic, 52.386);
      }
      break;
 case rExtraStageMaze:
      if(global.currentMusicID == global.sndExtraStage)
      {
          if(audio_sound_get_track_position(global.currentMusic) &gt;= 398.832)
          {
           audio_sound_set_track_position(global.currentMusic, 1.301);
          }
      }
      if(global.currentMusicID == global.sndExtraStageGlitched)
      {
          if(audio_sound_get_track_position(global.currentMusic) &gt;= 203.937)
          {
           audio_sound_set_track_position(global.currentMusic, 68.936);
          }
      }
      break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sfxDelay
for(var temp = 0; temp &lt; sfxCount; temp++)
{
 global.sfxDelay[temp]--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize everything
BGM = 0;
scrInitializeSounds();

//initialize all variables
scrInitializeGlobals();

//load the current config file, sets default config if it doesn't exist
scrLoadConfig();

with(objWaitingillust)
{
 alarm[0] = 50;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade current music out
global.musicFading = true;
global.currentGain = audio_sound_get_gain(global.currentMusic);     //get current gain
audio_sound_gain(global.currentMusic,0,1000);                       //fade out music over 1 second
if(audio_is_playing(global.curDanmaku))
    audio_stop_sound(global.curDanmaku);

alarm[0] = 50;  //pause music when it's done fading
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room checks

if (!instance_exists(objPlayMusic))  //make sure the play music object isn't in the current room
    scrGetMusic();  //find and play the proper music for the current room

global.worldSpeed = 50;
room_speed = global.worldSpeed;    //make sure game is running at the correct frame rate
scrSetRoomCaption();    //make sure window caption stays updated

//if(room == rStage1YellowStar) global.worldSpeed = 10;

switch(room)  //DeadSplit support
{
 case rBoss5Phase2:
 case rBoss6Destination:
 case rBoss6Crimson:
 case rBoss6Nue:
 case rBoss6GravityMan:
 case rBoss6Phase1:
 case rBoss7Phase2:
  deadSplitFlag = true;
  alarm[2] = 50;
  break;
 default: deadSplitFlag = false;
}
scrDeadSplitUpdate();

switch(room)
{
    case rBoss1Volcano: 
    case rBoss2Guy:
    case rBoss2Miku:
    case rBoss3Phase1:
    case rBoss3Phase2:
    case rBoss3Phase3:
    case rBoss3Avoid1:
    case rBoss3Avoid2:
    case rBoss3Avoid3:
    case rBoss3Avoid4:
    case rBoss3Rip:
    case rBoss4Phase1:
    case rBoss4Avoid:
    case rBoss4Phase2:
    case rBoss5Phase1:
    case rBoss5Avoid:
    case rBoss5Phase3:
    case rBoss5Death:
    case rBoss6Destination:
    case rBoss6Crimson:
    case rBoss6Nue:
    case rBoss6GravityMan:
    case rBoss7Phase1:
    case rBoss7Phase2:
    case rBoss7Phase4:
    case rBoss7Phase4Pre:
    case rEscapeA:
    case rEscapeB:
    case rEscapeC:
    case rEnding:
    case rEnding2:
    case rEnding3:
    case rEnding4:
    case rEnding5:
    case rExtraStageKTGSray:
    case rExtraStageDestinationBananas:
    case rExtraStageBloodFestivalBoss:
    case rExtraStageFinalDeadRoom:
        global.noPause = true; 
        break;    
    default: 
        global.noPause = false; 
        break;
}
switch(room) //check inf jump ability
{
    case rStage2CTB2:
    case rStage2DT: 
    case rStage2GreenMoon: 
    case rStage2Showdown: 
    case rStage2Green: 
    case rStage2Tribute: 
    case rStage2Yassan: 
    case rStage2RunTerminal:
    case rStage2BestGuy: 
    case rStage2GuyTower:
    case rStage2GuyTower2:
     if(!instance_exists(objLight))
      instance_create(0,0,objLight);
     if(!instance_exists(objShadow))
      instance_create(0,0,objShadow);
    case rBoss3Avoid4:
    case rBoss4Avoid:
        global.infJump = true;        
        break;
    default: global.infJump = false; break;
}
switch(room) //check VVVVVV physics
{
    case rStage3Diverse:
    case rBoss3Avoid1:
        global.vvvvvv = true; break;
    default: global.vvvvvv = false; break;
}

switch(room)
{
    case rStage5RainbowMiku: 
    case rStage7:
        if(!instance_exists(objSmoothCameraPersistent)) 
        {
            camera = instance_create(0,304,objSmoothCameraPersistent);
            camera.snapDiv = 10;  
            camera.yaxis = false; 
        }
        else
        {
            with(objSmoothCameraPersistent)
            {
                shake = false;
            }
        }
        break;
    default: with(objSmoothCameraPersistent)
                instance_destroy();
}


switch(room)
{
 case rStage6BossRush:
  global.portalAvailable = true;
  global.noShoot = false;
  break;
 case rExtraStageFinalDeadRoom:
  global.noShoot = true;
  break;
 default:
  global.noShoot = false;
  break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///title card
instance_create(view_xview[0]+view_wview[0],0,objGamelist);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize everything
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw pause screen

if (global.gamePaused)  //check if game is paused to draw the pause screen
{
    draw_clear(c_black);
    
    if (surface_exists(global.pauseSurf))       //check if surface exists before drawing it
        draw_surface(global.pauseSurf,0,0);
    
    draw_set_color(c_black);
    draw_set_alpha(0.4);
    
    draw_rectangle(-1,-1,display_get_gui_width(),display_get_gui_height(),0);    //darken the paused screen
    
    draw_set_alpha(1);
    
    draw_set_color(c_white);
    
    draw_set_halign(fa_center);
    draw_set_font(fJoystix30);
    
    draw_text(display_get_gui_width()/2,display_get_gui_height()/2 - 24,"PAUSE");
    
    draw_set_halign(fa_left);
    draw_set_font(fJoystix20);
    
    var t = global.time;
    var timeText = string(t div 3600) + ":";
    t = t mod 3600;
    timeText += string(t div 600);
    t = t mod 600;
    timeText += string(t div 60) + ":";
    t = t mod 60;
    timeText += string(t div 10);
    t = t mod 10;
    timeText += string(floor(t));
    
    scrDrawTextOutline(40,475,"Volume: " + string(global.volumeLevel) + "%",c_white,c_black);
    scrDrawTextOutline(40,500,"Deaths: " + string(global.death),c_white,c_black);
    scrDrawTextOutline(40,525,"  Time: " + timeText,c_white,c_black);
    var totalEnergy = 0;
    for(var temp = 0; temp &lt; 100; temp++)
    {
     if(global.energy[temp])
      totalEnergy++;
    }
    scrDrawTextOutline(40,550,"Energy: " + string(totalEnergy) + "%",c_white,c_black);
}
else if(drawEnergy)
{
    var totalEnergy = 0;
    for(var temp = 0; temp &lt; 100; temp++)
    {
     if(global.energy[temp])
      totalEnergy++;
    }
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_font(fJoystix20);
    scrDrawTextOutline(40,550,"Energy: " + string(totalEnergy) + "%",c_white,c_black);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw timer
draw_set_colour(c_white);

draw_set_font(fDefault12);

if(global.timerEnabled &amp;&amp; global.currentSegmentIndex != -1)
{
 segmentTime = global.time - global.lastRunStart[global.currentSegmentIndex];
 timer = "";
 var t = floor(segmentTime);
    
 timer += string(t div 3600) + ":";
 t = t mod 3600;
 timer += string(t div 600);
 t = t mod 600;
 timer += string(t div 60) + ":";
 t = t mod 60;
 timer += string(t div 10);
 t = t mod 10;
 timer += string(t);
    
 if(instance_exists(objPlayer) &amp;&amp; objPlayer.x &lt; 300 &amp;&amp; objPlayer.y &gt; view_yview + 576)
 {
  //drawX = view_xview[0] + view_wview[0] - 10;
  drawX = 790;
  draw_set_halign(fa_right);
 }
 else
 {
  //drawX = view_xview[0] + 10;
  drawX = 10;
  draw_set_halign(fa_left);
 }
 
 scrDrawTextOutline(drawX,588,string(timer),c_white,c_black);
 //scrDrawTextOutline(100,100,string(instance_number(objGrollaTan2)),c_white,c_black);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug
if(global.debug)
{
 scrDrawTextOutline(10,10,"Real FPS: " + string(fps_real),c_white,c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
